package healthAnalysis // ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠ package ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

import (
	"fmt"

    "strconv" 
    "strings" 
	// üí° ‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ entity ‡πÅ‡∏•‡∏∞ gorm ‡∏î‡πâ‡∏ß‡∏¢
	"github.com/JanisataMJ/WebApp/entity" 
	"gorm.io/gorm" 
)

func parseHours(sleep string) float64 {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    if sleep == "" || strings.TrimSpace(sleep) == "0 h. 0 m." {
        return 0.0
    }

    // 2. ‡πÅ‡∏¢‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏ó‡∏µ
    // ‡πÄ‡∏ä‡πà‡∏ô "8 h. 30 m."
    parts := strings.FieldsFunc(sleep, func(r rune) bool {
        return r == 'h' || r == 'm' || r == '.' || r == ' '
    })
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    var h, m float64
    if len(parts) >= 1 {
        hStr := strings.TrimSpace(parts[0])
        hVal, err := strconv.ParseFloat(hStr, 64)
        if err == nil {
            h = hVal
        }
    }
    
    if len(parts) >= 2 {
        mStr := strings.TrimSpace(parts[1])
        mVal, err := strconv.ParseFloat(mStr, 64)
        if err == nil {
            m = mVal
        }
    }
    
    // 3. ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
    return h + (m / 60.0)
}

func AnalyzeHealthData(db *gorm.DB) {
	// 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ RiskLevel (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ lGood, lNormal, lBad ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
	var lGood, lNormal, lBad entity.RiskLevel
	
    // ‡∏î‡∏∂‡∏á RiskLevels ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô SetupDatabase()
    db.First(&lGood, "rlevel = ?", "‡∏î‡∏µ")
	db.First(&lNormal, "rlevel = ?", "‡∏õ‡∏Å‡∏ï‡∏¥")
	db.First(&lBad, "rlevel = ?", "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á")

	// 2. ‡∏•‡∏ö HealthAnalysis ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥)
	db.Exec("DELETE FROM health_analyses")
	db.Exec("UPDATE SQLITE_SEQUENCE SET seq = 0 WHERE name = 'health_analyses'")

	// 3. ‡∏î‡∏∂‡∏á HealthData ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Import ‡∏°‡∏≤‡∏à‡∏≤‡∏Å Google Sheet)
	var healthDataList []entity.HealthData
	err := db.Find(&healthDataList).Error

	if err != nil {
		fmt.Println("‚ö†Ô∏è WARNING: Error fetching HealthData:", err)
	}

	fmt.Printf("‚úÖ Fetched %d HealthData records for analysis.\n", len(healthDataList))

	if len(healthDataList) == 0 {
		fmt.Println("üõë No HealthData records found. Skipping HealthAnalysis creation.")
		return
	}

	// 4. ‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
	for _, data := range healthDataList {
		// üõë Logic ‡∏Ç‡πâ‡∏≤‡∏°: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
		if data.Bpm == 0 || data.Spo2 == 0.000000 {
			//fmt.Printf("‚ö†Ô∏è Skipping HealthData ID %d due to missing or zero Bpm/Spo2 data.\n", data.ID)
			//continue // ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á data ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
		}

		// üõë Logic ‡∏Ç‡πâ‡∏≤‡∏°: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SleepHours ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô String (‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô)
		if data.SleepHours == "" || data.SleepHours == "0 h. 0 m." {
            // ‡πÄ‡∏£‡∏≤‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏Ç‡πâ‡∏≤‡∏° ‡πÅ‡∏ï‡πà‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ Logic ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
            // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏Ç‡πâ‡∏≤‡∏°:
            // fmt.Printf("‚ö†Ô∏è Skipping HealthData ID %d due to missing SleepHours.\n", data.ID)
            // continue
		}

		healthAnalyses := []entity.HealthAnalysis{}

		// 1. ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à (Bpm)
		var riskBpm entity.RiskLevel
		interpretationBpm := "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏õ‡∏Å‡∏ï‡∏¥"
		suggestionBpm := "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏õ‡∏Å‡∏ï‡∏¥‡∏î‡∏µ"
		riskBpm = lNormal
		if data.Bpm > 100 {
			interpretationBpm = "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏™‡∏π‡∏á"
			suggestionBpm = "‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏´‡∏≤‡∏Å‡∏™‡∏π‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"
			riskBpm = lBad
		} else if data.Bpm < 60 {
			interpretationBpm = "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ï‡πà‡∏≥"
			suggestionBpm = "‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå"
			riskBpm = lBad
		}
		healthAnalyses = append(healthAnalyses, entity.HealthAnalysis{
			Category:       "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à",
			Value:          fmt.Sprintf("%d", data.Bpm),
			Interpretation: interpretationBpm,
			Suggestion:     suggestionBpm,
			HealthDataID:   data.ID,
			RiskLevelID:    riskBpm.ID,
		})

		// 2. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡πâ‡∏≤‡∏ß‡πÄ‡∏î‡∏¥‡∏ô (Steps)
		var riskSteps entity.RiskLevel
		interpretationSteps := "‡πÄ‡∏î‡∏¥‡∏ô‡∏Ñ‡∏£‡∏ö 5,000 ‡∏Å‡πâ‡∏≤‡∏ß"
		suggestionSteps := "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å"
		riskSteps = lGood
		if data.Steps < 5000 {
			interpretationSteps = "‡∏¢‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 5,000 ‡∏Å‡πâ‡∏≤‡∏ß"
			suggestionSteps = "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô"
			riskSteps = lBad
		}
		healthAnalyses = append(healthAnalyses, entity.HealthAnalysis{
			Category:       "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡πâ‡∏≤‡∏ß",
			Value:          fmt.Sprintf("%d ‡∏Å‡πâ‡∏≤‡∏ß", data.Steps),
			Interpretation: interpretationSteps,
			Suggestion:     suggestionSteps,
			HealthDataID:   data.ID,
			RiskLevelID:    riskSteps.ID,
		})

		// 3. ‡∏≠‡∏≠‡∏Å‡∏ã‡∏¥‡πÄ‡∏à‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î (Spo2)
		var riskSpo2 entity.RiskLevel
		interpretationSpo2 := "‡∏õ‡∏Å‡∏ï‡∏¥"
		suggestionSpo2 := "‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ"
		riskSpo2 = lGood
		if data.Spo2 < 95.0 {
			interpretationSpo2 = "‡∏≠‡∏≠‡∏Å‡∏ã‡∏¥‡πÄ‡∏à‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ï‡πà‡∏≥"
			suggestionSpo2 = "‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå"
			riskSpo2 = lBad
		}
		healthAnalyses = append(healthAnalyses, entity.HealthAnalysis{
			Category:       "‡∏≠‡∏≠‡∏Å‡∏ã‡∏¥‡πÄ‡∏à‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î",
			Value:          fmt.Sprintf("%.1f %%", data.Spo2),
			Interpretation: interpretationSpo2,
			Suggestion:     suggestionSpo2,
			HealthDataID:   data.ID,
			RiskLevelID:    riskSpo2.ID,
		})

		// 4. ‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö (SleepHours) - Logic ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        var riskSleep entity.RiskLevel
        
        // üí° ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ô‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô float ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        sleepHoursFloat := parseHours(data.SleepHours)

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        interpretationSleep := "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö"
        suggestionSleep := "‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Smartwatch ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
        riskSleep = lNormal // ‡πÄ‡∏õ‡πá‡∏ô Normal ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

        if sleepHoursFloat > 0.0 {
            if sleepHoursFloat < 6.0 {
                // ‡∏ô‡∏≠‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á/Bad)
                interpretationSleep = "‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏¢"
                suggestionSleep = "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"
                riskSleep = lBad
            } else if sleepHoursFloat <= 9.0 {
                // ‡∏ô‡∏≠‡∏ô 6 ‡∏ñ‡∏∂‡∏á 9 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏î‡∏µ/Good)
                interpretationSleep = "‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡∏ô‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"
                suggestionSleep = "‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ"
                riskSleep = lGood
            } else {
                // ‡∏ô‡∏≠‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 9 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á/Bad)
                interpretationSleep = "‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"
                suggestionSleep = "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô"
                riskSleep = lBad
            }
        } 
        // ‡∏ñ‡πâ‡∏≤ sleepHoursFloat ‡πÄ‡∏õ‡πá‡∏ô 0.0 ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..." (lNormal)
        
        healthAnalyses = append(healthAnalyses, entity.HealthAnalysis{
            Category:        "‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö",
            Value:           data.SleepHours,
            Interpretation:  interpretationSleep,
            Suggestion:      suggestionSleep,
            HealthDataID:    data.ID,
            RiskLevelID:     riskSleep.ID,
        })


		healthAnalyses = append(healthAnalyses, entity.HealthAnalysis{
			Category:       "‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö",
			Value:          data.SleepHours,
			Interpretation: interpretationSleep,
			Suggestion:     suggestionSleep,
			HealthDataID:   data.ID,
			RiskLevelID:    riskSleep.ID,
		})

		// 5. ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç (CaloriesBurned)
		var riskCalories entity.RiskLevel
		interpretationCalories := "‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"
		suggestionCalories := "‡∏Ñ‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏ß‡πâ"
		riskCalories = lGood

		// ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç‡πÄ‡∏Å‡∏¥‡∏ô 500 ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà
		if data.CaloriesBurned < 500 {
			interpretationCalories = "‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"
			suggestionCalories = "‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô"
			riskCalories = lBad
		}

		healthAnalyses = append(healthAnalyses, entity.HealthAnalysis{
			Category:       "‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ",
			Value:          fmt.Sprintf("%f", data.CaloriesBurned),
			Interpretation: interpretationCalories,
			Suggestion:     suggestionCalories,
			HealthDataID:   data.ID,
			RiskLevelID:    riskCalories.ID,
		})
        
        // 6. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        // ...

		// 5. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å HealthAnalysis ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á HealthData ‡∏ô‡∏µ‡πâ
		for _, analysis := range healthAnalyses {
			db.Create(&analysis)
		}
	}
}