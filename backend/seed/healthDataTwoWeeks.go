package seed

import (
	"fmt"
	"log"
	"math/rand"
	"time"

	"github.com/JanisataMJ/WebApp/config"
	"github.com/JanisataMJ/WebApp/controller/healthAnalysis" // *** IMPORT healthAnalysis package ***
	"github.com/JanisataMJ/WebApp/controller/healthSummary"
	"github.com/JanisataMJ/WebApp/entity"

	"gorm.io/gorm"
)

func SeedHealthDataTwoWeeks(db *gorm.DB) {
	// ---------------------------
	// 1Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á RiskLevel
	// ---------------------------
	var lNormal entity.RiskLevel // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏Ñ‡πà lNormal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HealthSummary (RiskLevelID: lNormal.ID)
	Rlevels := []entity.RiskLevel{
		{Rlevel: "‡∏î‡∏µ"},
		{Rlevel: "‡∏õ‡∏Å‡∏ï‡∏¥"},
		{Rlevel: "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"},
	}
	for i, level := range Rlevels {
		db.FirstOrCreate(&Rlevels[i], entity.RiskLevel{Rlevel: level.Rlevel})
	}
	// lGood ‡πÅ‡∏•‡∏∞ lBad ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®/‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß
	lNormal = Rlevels[1] // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î lNormal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô HealthSummary

	// ---------------------------
	// 2Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (UserID=4)
	// ---------------------------
	var user entity.User
	hashedPassword, _ := config.HashPassword("123456")

	db.FirstOrCreate(&user, entity.User{
		Email: "user6@gmail.com",
	}, entity.User{
		Username:    "user6",
		Password:    hashedPassword,
		FirstName: "User6",
		LastName:    "Fulldata",
		RoleID:      2, // User role
		GenderID:    1, // Male
	})

	rand.Seed(time.Now().UnixNano())
	now := time.Now().Truncate(24 * time.Hour)

	// ---------------------------
	// 3Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á HealthData + HealthAnalysis ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 2 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
	// ---------------------------
	today := time.Now() // ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
	startOfDay := time.Date(today.Year(), today.Month(), today.Day(), 0, 0, 0, 0, today.Location())

	for daysAgo := 13; daysAgo >= 0; daysAgo-- {
		day := startOfDay.AddDate(0, 0, -daysAgo)

		// ‚úÖ ‡∏™‡∏∏‡πà‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô (6.0 - 9.0 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
		sleepDuration := 6 + rand.Float64()*3 // 6-9 ‡∏ä‡∏°.
		hours := int(sleepDuration)
		minutes := int((sleepDuration - float64(hours)) * 60)

		sleepString := fmt.Sprintf("%dh %dm", hours, minutes)

		maxHour := 23
		if day.Year() == today.Year() && day.YearDay() == today.YearDay() {
			maxHour = today.Hour() - 1
			if maxHour < 0 {
				maxHour = 0
			}
		}

		cumulativeSteps := int64(0)
		cumulativeCalories := 0.0

		for hour := 0; hour <= maxHour; hour++ {
			// ‡∏™‡∏∏‡πà‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡πÄ‡∏î‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ô‡∏µ‡πâ
			stepsThisHour := int64(rand.Intn(200) + 50) // ‡πÄ‡∏ä‡πà‡∏ô 50-250 ‡∏Å‡πâ‡∏≤‡∏ß/‡∏ä‡∏°.
			cumulativeSteps += stepsThisHour

			// ‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ô‡∏µ‡πâ
			caloriesThisHour := 50 + rand.Float64()*30 // ‡πÄ‡∏ä‡πà‡∏ô 50-80 kcal/‡∏ä‡∏°.
			cumulativeCalories += caloriesThisHour

			hd := entity.HealthData{
				Timestamp:      day.Add(time.Duration(hour) * time.Hour),
				Bpm:            uint(60 + rand.Intn(40)),
				Steps:          cumulativeSteps,
				CaloriesBurned: cumulativeCalories, // üëà ‡πÉ‡∏ä‡πâ cumulative
				Spo2:           95 + float64(rand.Intn(4)),
				SleepHours:     "",
				UserID:         user.ID,
			}

			if hour == 0 {
				hd.SleepHours = sleepString
			}

			db.Create(&hd)

			// *** ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ ProcessNewHealthData ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á analyses ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ***
			// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á HealthAnalysis ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á RiskLevel ‡πÄ‡∏≠‡∏á
			healthAnalysis.ProcessNewHealthData(db, &hd) 
			
			// ‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á analyses ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å
			/*
			analyses := []entity.HealthAnalysis{
				// ...
				{
					Category: ¬† ¬† ¬† "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à",
					Value: ¬† ¬† ¬† ¬† ¬†fmt.Sprintf("%d bpm", hd.Bpm),
					Interpretation: interpretHeartRate(hd.Bpm),
					Suggestion: ¬† ¬† suggestHeartRate(hd.Bpm),
					RiskLevelID: ¬† ¬†mapRiskLevelHeartRate(hd.Bpm, lGood, lNormal, lBad),
					HealthDataID: ¬† hd.ID,
				},
				// ...
			}
			db.Create(&analyses)
			*/
		}
	}

	// ---------------------------
	// 4Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á HealthSummary ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå 2 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
	// ---------------------------
	for week := 0; week < 2; week++ {
		start := now.AddDate(0, 0, -(13 - week*7))
		end := start.AddDate(0, 0, 6).Add(23*time.Hour + 59*time.Minute + 59*time.Second) // ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå

		_, currentWeekNum := now.ISOWeek() 

		var healthDatas []entity.HealthData
		db.Where("user_id = ? AND timestamp BETWEEN ? AND ?", user.ID, start, end).Find(&healthDatas)

		var totalSleep float64
		for _, hd := range healthDatas {
			totalSleep += healthSummary.ParseSleepHours(hd.SleepHours)
		}
		avgSleep := 0.0
		if len(healthDatas) > 0 {
			// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô: (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î) / (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 7 ‡∏ß‡∏±‡∏ô)
			avgSleep = totalSleep / float64(7) 
		}

		summary := entity.HealthSummary{
			PeriodStart: start,
			PeriodEnd:   end,
			AvgBpm:      70 + rand.Float64()*10,
			MinBpm:      55 + uint(rand.Intn(10)),
			MaxBpm:      100 + uint(rand.Intn(10)),
			AvgSteps:    7000 + rand.Float64()*2000,
			TotalSteps:  49000 + rand.Intn(10000),
			AvgSleep:    avgSleep, 
			AvgCalories: 2200 + rand.Float64()*500,
			AvgSpo2:     95 + rand.Float64()*3,
			WeekNumber:  uint(currentWeekNum) - uint(week), 
			UserID:      user.ID,
			TrendsID:    2,
			RiskLevelID: lNormal.ID, // <--- ‡πÉ‡∏ä‡πâ lNormal ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏ß‡πâ
		}
		db.Create(&summary)

		// Seed Notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö summary
		notif := entity.Notification{
			Timestamp:            time.Now(),
			Title:                fmt.Sprintf("Weekly Health Summary Week %d", summary.WeekNumber),
			Message:              "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
			UserID:               user.ID,
			HealthSummaryID:      &summary.ID,
			HealthTypeID:         1,
			NotificationStatusID: 2,
		}
		db.Create(&notif)
	}

	log.Println("Seed data for 2 weeks created successfully!")
}