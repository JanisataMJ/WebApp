package healthAnalysis

import (
	"context"
	"fmt"
	"github.com/gin-gonic/gin"
	"log"
	"net/http"
	//"os"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/JanisataMJ/WebApp/config"
	"github.com/JanisataMJ/WebApp/controller/gmail"
	"github.com/JanisataMJ/WebApp/entity"
)

// ----------------------------------- API Handlers ------------------------------------
// POST /health-data (Handler ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ Trigger ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå)
func SaveHealthDataHandler(c *gin.Context) {
	var newData entity.HealthData
	if err := c.ShouldBindJSON(&newData); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user_id ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô 0
	if newData.UserID == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "User ID is required"})
		return
	}

	// 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
	var lastRecordedData entity.HealthData
	// ‡πÉ‡∏ä‡πâ Order("timestamp desc") ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
	config.DB().Where("user_id = ?", newData.UserID).
		Order("timestamp desc").
		Limit(1).
		Find(&lastRecordedData)

	// 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á DB
	if err := config.DB().Create(&newData).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to save data"})
		return
	}

	// 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà"
	newDayStr := newData.Timestamp.Format("2006-01-02")
	lastDayStr := lastRecordedData.Timestamp.Format("2006-01-02")

	// ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
	if newDayStr != lastDayStr && lastRecordedData.ID != 0 {
		// Trigger ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÅ‡∏ö‡∏ö Asynchronous
		go func() {
			// ‡πÉ‡∏ä‡πâ context.Background() ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Background Job
			ctx := context.Background()
			// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
			RunWeeklyAnalysisForSingleUser(ctx, newData.UserID)
		}()
	}

	c.JSON(http.StatusOK, gin.H{"message": "Data saved and analysis triggered (if new day data)."})
}

// GET /list-healthAnalysis
func ListHealthAnalysis(c *gin.Context) {
	var analysis []entity.HealthAnalysis
	if err := config.DB().
		Preload("HealthData").
		Preload("RiskLevel").
		Preload("Notification").
		Find(&analysis).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, analysis)
}

// GET /healthAnalysis/:id
func GetHealthAnalysis(c *gin.Context) {
	id := c.Param("id")
	analysisID, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid ID"})
		return
	}

	var analysis entity.HealthAnalysis
	if err := config.DB().
		Preload("HealthData").
		Preload("RiskLevel").
		Preload("Notification").
		First(&analysis, analysisID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "HealthAnalysis not found"})
		return
	}
	c.JSON(http.StatusOK, analysis)
}

// GET /sleep-analysis/:userId
func GetSleepAnalysisByUser(c *gin.Context) {
	userId := c.Param("userId")

	var analyses []entity.HealthAnalysis
	if err := config.DB().
		Model(&entity.HealthAnalysis{}).
		Joins("JOIN health_data ON health_data.id = health_analyses.health_data_id").
		Where("health_analyses.category = ? AND health_data.user_id = ?", "‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö", userId).
		Preload("HealthData").
		Preload("RiskLevel").
		Find(&analyses).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, analyses)
}

// ‚úÖ Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Endpoint API ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Gemini
func AnalyzeWithGeminiHandler(c *gin.Context) {
	userID, err := strconv.ParseUint(c.Param("userID"), 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid user ID"})
		return
	}

	var healthData []entity.HealthData
	if err := config.DB().Where("user_id = ?", userID).Find(&healthData).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	// *** ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å geminiAnalysis.go ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ***
	analysis, err := AnalyzeHealthDataWithGemini(c.Request.Context(), uint(userID), healthData)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message":  "Health analysis completed successfully",
		"analysis": analysis,
	})
}

//----------------------------------- Core Logic ------------------------------------

// WeeklyAnalysisJob ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô Goroutine ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
func WeeklyAnalysisJob(ctx context.Context) {
	// *** ‡πÄ‡∏î‡∏¥‡∏°: ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ***
	runWeeklyAnalysis(ctx) // ‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

	select {
	case <-ctx.Done():
		log.Println("Weekly analysis job stopped.")
		return
	default:
		// ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠
	}
}

// runWeeklyAnalysis ‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
func runWeeklyAnalysis(ctx context.Context) {
	var users []entity.User
	if err := config.DB().Find(&users).Error; err != nil {
		log.Printf("Error retrieving users for weekly analysis: %v\n", err)
		return
	}

	for _, user := range users {
		log.Printf("Starting scheduled weekly analysis for user ID: %d\n", user.ID)
		// ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
		RunWeeklyAnalysisForSingleUser(ctx, user.ID)
	}
}

// ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ alert ‡∏Ç‡∏≠‡∏á user ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
var userAlertStatus = struct {
	sync.RWMutex
	// Map: Key = UserID (uint), Value = true/false (Alert ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á/‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
	alerts map[uint]struct{
		IsAlert bool
		LastSent time.Time
		LastAlertedID uint
	} 
}{alerts: make(map[uint]struct{
	IsAlert bool 
	LastSent time.Time
	LastAlertedID uint
})} 

// StartUserRealtimeAlertMonitoring ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HealthData ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö userID ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
func StartUserRealtimeAlertMonitoring(userID uint, intervalSeconds int) {
	for {
		checkUserHealth(userID)
		time.Sleep(time.Duration(intervalSeconds) * time.Second)
	}
}

func checkUserHealth(userID uint) {
	var latest entity.HealthData
	
	// 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° ID DESC ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
	if err := config.DB().
		Where("user_id = ?", userID).
		Order("id desc"). // üö© ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ ID desc ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
		Limit(1).
		First(&latest).Error; err != nil {
		log.Printf("No health data for user %d yet: %v", userID, err)
		return
	}

	// 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ß‡∏¥‡∏Å‡∏§‡∏ï (Alert Condition)
	shouldAlert := latest.Bpm >= 120 || latest.Bpm <= 50 || latest.Spo2 <= 90.0

	userAlertStatus.RLock()
	status := userAlertStatus.alerts[userID]
	userAlertStatus.RUnlock()
    
    // üö© Logic ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á: ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ ID ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏Å‡∏§‡∏ï‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    isNewData := latest.ID > status.LastAlertedID
    shouldSendAlert := false

    if isNewData && shouldAlert {
        shouldSendAlert = true 
    }
    
	if shouldSendAlert {
        
        // --- 3. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ‡πÅ‡∏•‡∏∞ Alert Text ---
		var user entity.User
		if err := config.DB().First(&user, userID).Error; err != nil {
			log.Printf("‚ùå Failed to fetch user %d for alert email: %v", userID, err)
			return 
		}

		alertText := ""
		if latest.Bpm >= 120 {
			alertText += fmt.Sprintf("- ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏™‡∏π‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: %d bpm\n", latest.Bpm)
		}
		if latest.Bpm <= 50 {
			alertText += fmt.Sprintf("- ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ï‡πà‡∏≥‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: %d bpm\n", latest.Bpm)
		}
		if latest.Spo2 <= 90.0 {
			alertText += fmt.Sprintf("- ‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏ã‡∏¥‡πÄ‡∏à‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ï‡πà‡∏≥‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: %.2f%%\n", latest.Spo2)
		}

		go gmail.SendImmediateAlertBackground(config.DB(), user, 1, alertText)

		// üö© 5. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏° ID ‡πÉ‡∏´‡∏°‡πà)
		userAlertStatus.Lock()
		userAlertStatus.alerts[userID] = struct{
			IsAlert bool
			LastSent time.Time
			LastAlertedID uint
		}{
			IsAlert: true,
			LastSent: time.Now(), 
			LastAlertedID: latest.ID, // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ID ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á Alert
		}
		userAlertStatus.Unlock()
	}

	// üö© 6. ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (Resetting)
	// ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥ (!shouldAlert) AND ‡πÄ‡∏Ñ‡∏¢ Alert ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô (status.IsAlert ‡πÄ‡∏õ‡πá‡∏ô true)
	if !shouldAlert && status.IsAlert { 
		userAlertStatus.Lock()
		userAlertStatus.alerts[userID] = struct{
			IsAlert bool
			LastSent time.Time
			LastAlertedID uint
		}{
			IsAlert: false, // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
			LastSent: time.Time{}, 
			LastAlertedID: status.LastAlertedID, // ‡∏Ñ‡∏á ID ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢ Alert ‡πÑ‡∏ß‡πâ
		}
		userAlertStatus.Unlock()
	}
}


// RunWeeklyAnalysisForSingleUser ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
// ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Trigger ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
func RunWeeklyAnalysisForSingleUser(ctx context.Context, userID uint) {
	var user entity.User
	if err := config.DB().First(&user, userID).Error; err != nil {
		log.Printf("User not found for analysis: %d\n", userID)
		return
	}

	log.Printf("Starting on-demand weekly analysis for user ID: %d\n", user.ID)

	// --- 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå 00:00:00) ---
	now := time.Now()

	// ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
	daysToMonday := int(now.Weekday() - time.Monday)
	if daysToMonday < 0 {
		daysToMonday += 7
	}
	currentWeekStart := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location()).AddDate(0, 0, -daysToMonday)

	// --- 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏ñ‡∏∂‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô) ---
	var healthData []entity.HealthData

	if err := config.DB().
		Where("user_id = ?", user.ID).
		Where("timestamp >= ? AND timestamp <= ?", currentWeekStart, now).
		Order("timestamp ASC").
		Find(&healthData).Error; err != nil {

		log.Printf("Error retrieving current week health data for user %d: %v\n", user.ID, err)
		return
	}

	// --- 3. LOGIC ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß ---

	// ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
	minRecordsThreshold := 4

	analysisRangeStart := currentWeekStart
	analysisRangeEnd := now

	// üö© ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏´‡∏•‡∏±‡∏Å:
	// A. ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå (‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏±‡πâ‡∏ô‡πÜ)
	// B. ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏µ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 7 ‡∏ß‡∏±‡∏ô‡πÄ‡∏ï‡πá‡∏°)
	// ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡πÑ‡∏õ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß

	shouldConsiderPreviousWeek := now.Weekday() != time.Monday || len(healthData) < minRecordsThreshold

	// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
	if shouldConsiderPreviousWeek {
		log.Printf("Current week data is incomplete/early (%d records). Considering previous week data for user %d.\n", len(healthData), user.ID)

		// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå)
		previousWeekStart := currentWeekStart.AddDate(0, 0, -7)
		previousWeekEnd := currentWeekStart.AddDate(0, 0, -1)
		previousWeekEnd = time.Date(previousWeekEnd.Year(), previousWeekEnd.Month(), previousWeekEnd.Day(), 23, 59, 59, 999999999, now.Location())

		var previousWeekData []entity.HealthData
		if err := config.DB().
			Where("user_id = ?", user.ID).
			Where("timestamp >= ? AND timestamp <= ?", previousWeekStart, previousWeekEnd).
			Order("timestamp ASC").
			Find(&previousWeekData).Error; err != nil {

			log.Printf("Error retrieving previous week health data for user %d: %v\n", user.ID, err)
			return
		}

		// ‡∏ñ‡πâ‡∏≤‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠
		if len(previousWeekData) >= minRecordsThreshold {
			healthData = previousWeekData // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
			analysisRangeStart = previousWeekStart
			analysisRangeEnd = previousWeekEnd
			log.Printf("Successfully switched to previous week data (%d records) for user %d. Range: %s to %s\n",
				len(healthData), user.ID, analysisRangeStart.Format("2006-01-02"), analysisRangeEnd.Format("2006-01-02"))
		} else if len(healthData) >= minRecordsThreshold {
			// ‡∏ñ‡πâ‡∏≤‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡πÅ‡∏ï‡πà‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠
			log.Printf("Previous week data insufficient. Reverting to current week data (%d records) for user %d.\n", len(healthData), user.ID)
			// ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ analysisRangeStart, analysisRangeEnd ‡πÄ‡∏î‡∏¥‡∏° (currentWeekStart, now)
		} else {
			log.Printf("Data still insufficient (%d records in previous week, %d in current). Aborting analysis for user %d.\n", len(previousWeekData), len(healthData), user.ID)
			return // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
		}
	} else {
		// ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏à‡∏ö‡πÑ‡∏õ (currentWeekStart ‡∏ñ‡∏∂‡∏á now) ‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
		log.Printf("Current week data is sufficient (%d records). Analyzing current week for user %d.\n", len(healthData), user.ID)
		// ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ analysisRangeStart, analysisRangeEnd ‡πÄ‡∏î‡∏¥‡∏°
	}

	log.Printf("Final analysis range: %s to %s (%d records) for user %d.\n",
		analysisRangeStart.Format("2006-01-02"),
		analysisRangeEnd.Format("2006-01-02"),
		len(healthData), user.ID)

	// --- 4. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Gemini ---
	analysis, err := AnalyzeHealthDataWithGemini(ctx, user.ID, healthData)
	if err != nil {
		log.Printf("Error analyzing data for user %d: %v\n", user.ID, err)
		return
	}

	// --- 5. ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Notification/Email ---

	// ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Email
	var htmlContent strings.Builder
	htmlContent.WriteString(fmt.Sprintf("<p>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì %s,</p>", user.FirstName))
	htmlContent.WriteString(fmt.Sprintf("<p>‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á <b>%s ‡∏ñ‡∏∂‡∏á %s</b> ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≤‡∏Å Gemini:</p>",
		analysisRangeStart.Format("2006-01-02"),
		analysisRangeEnd.Format("2006-01-02")))
	htmlContent.WriteString("<ul>")

	// ‡∏•‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ Markdown ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô <li>
	lines := strings.Split(analysis, "\n")
	for _, line := range lines {
		// ‡∏•‡∏ö ** ‡πÅ‡∏•‡∏∞ *
		cleanedLine := strings.ReplaceAll(line, "**", "")
		cleanedLine = strings.ReplaceAll(cleanedLine, "*", "")
		cleanedLine = strings.TrimSpace(cleanedLine)

		if len(cleanedLine) > 0 {
			htmlContent.WriteString("<li>" + cleanedLine + "</li>")
		}
	}
	htmlContent.WriteString("</ul>")

	// 5.1 ‡∏™‡∏£‡πâ‡∏≤‡∏á entity.Notification
	notif := entity.Notification{
		Timestamp: time.Now(),
		Title: fmt.Sprintf("‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (%s - %s)",
			analysisRangeStart.Format("01/02"),
			analysisRangeEnd.Format("01/02")),
		Message:              analysis, // Message ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ \n ‡πÅ‡∏•‡∏∞ ** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Frontend ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ
		UserID:               user.ID,
		NotificationStatusID: 2,
	}
	if err := config.DB().Create(&notif).Error; err != nil {
		log.Printf("Failed to save weekly summary notification for user %d: %v", user.ID, err)
	}

	// 5.2 ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ HTML
	emailBody := htmlContent.String()
	if err := gmail.SendEmail(user.Email, "Weekly Health Summary Update", emailBody); err != nil {
		log.Printf("Failed to send email to user %d: %v", user.ID, err)
	}

	log.Printf("Completed analysis and notification for user ID: %d\n", user.ID)
}
