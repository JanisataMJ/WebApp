package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"strconv"

	"github.com/JanisataMJ/WebApp/config"
	// ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Alias: admin_count
	adminCount "github.com/JanisataMJ/WebApp/controller/admin_count"
	"github.com/JanisataMJ/WebApp/controller/article"
	// ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Alias: gender
	gender "github.com/JanisataMJ/WebApp/controller/gender"
	"github.com/JanisataMJ/WebApp/controller/gmail"
	"github.com/JanisataMJ/WebApp/entity"
	"github.com/JanisataMJ/WebApp/controller/healthAnalysis"
	"github.com/JanisataMJ/WebApp/controller/healthData"
	"github.com/JanisataMJ/WebApp/controller/healthSummary"
	"github.com/JanisataMJ/WebApp/controller/notification"
	"github.com/JanisataMJ/WebApp/controller/smartwatchDevice"
	// ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Alias: user
	user "github.com/JanisataMJ/WebApp/controller/user"
	"github.com/JanisataMJ/WebApp/middlewares"
	"github.com/JanisataMJ/WebApp/seed"
	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	_ "github.com/mattn/go-sqlite3"

)

const PORT = "8000"

func init() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
}

func main() {
	emailUser := os.Getenv("EMAIL_USER")
	emailPass := os.Getenv("EMAIL_PASS")
	smtpHost := os.Getenv("SMTP_HOST")
	smtpPort := os.Getenv("SMTP_PORT")

	log.Println("Email User:", emailUser)
	log.Println("Email Pass:", emailPass)
	log.Println("SMTP Host:", smtpHost, "Port:", smtpPort)

	config.ConnectionDB()
	gormDB := config.DB()
	config.SetupDatabase()

	//seed.SeedHealthData(gormDB)
	seed.SeedHealthDataTwoWeeks(gormDB)

	sqlDB, err := gormDB.DB()
	if err != nil {
		log.Fatalf("Failed to get *sql.DB from GORM: %v", err)
	}

	// üí° ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ SetupConfigTable ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏µ‡∏ó
	if err := healthData.SetupConfigTable(sqlDB); err != nil {
		log.Fatalf("Failed to setup config table: %v", err)
	}

	// Initial import: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ ImportSheetData ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏µ‡∏ó
	// üö© ImportSheetData ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà ImportHealthData ‡πÄ‡∏î‡∏¥‡∏°
	log.Println("‚ñ∂Ô∏è Starting initial data import for HealthData_Daily...")
	healthData.ImportSheetData(sqlDB, "HealthData_Daily")

	log.Println("‚ñ∂Ô∏è Starting initial data import for HealthData_LatestAll...")
	healthData.ImportSheetData(sqlDB, "HealthData_LatestAll")
	// ----------------------------------------------------

	log.Println("‚ñ∂Ô∏è Starting initial Health Analysis...")
	healthAnalysis.AnalyzeHealthData(gormDB) // üí° ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Analysis ‡∏´‡∏•‡∏±‡∏á Import
	log.Println("‚úÖ Initial Health Analysis completed.")

	// ----------------------------------------------------
	// üö© ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Backfill Summary
	// ----------------------------------------------------
	log.Println("‚ñ∂Ô∏è Starting FULL BACKFILL Summary Job...")
	healthSummary.RunSummaryJob(gormDB, true)
	log.Println("‚úÖ FULL BACKFILL Summary Job completed.")
	// ----------------------------------------------------

	// Start data import job (‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ ImportSheetData ‡∏™‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ã‡πâ‡∏≥‡πÜ)
	// üí° ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ healthData.StartDataImportJob ‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å ImportSheetData()
	go healthData.StartDataImportJob(sqlDB)

	// Gin framework setup
	r := gin.Default()
	r.Use(CORSMiddleware())
	r.Use(middlewares.DBMiddleware(config.DB()))

	// Define routes...
	r.POST("/signup", user.SignUp)            // ‡πÉ‡∏ä‡πâ Alias 'user'
	r.POST("/signin", user.SignIn)            // ‡πÉ‡∏ä‡πâ Alias 'user'
	r.POST("/create-admin", user.CreateAdmin) // ‡πÉ‡∏ä‡πâ Alias 'user'

	router := r.Group("/")
	{
		router.Use(middlewares.Authorizes())
		r.Static("/uploads", "./uploads")
		router.PUT("/user/:id", user.Update)    // ‡πÉ‡∏ä‡πâ Alias 'user'
		router.GET("/users", user.GetAll)       // ‡πÉ‡∏ä‡πâ Alias 'user'
		router.GET("/user/:id", user.Get)       // ‡πÉ‡∏ä‡πâ Alias 'user'
		router.DELETE("/user/:id", user.Delete) // ‡πÉ‡∏ä‡πâ Alias 'user'
		router.POST("/create-notification/:id", notification.CreateNotification)
		router.GET("/notification/:id", notification.GetNotificationsByUserID)
		router.PATCH("/notification/:id/status", notification.UpdateNotificationStatusByID)
		router.GET("/run-weekly-analysis/:userID", func(c *gin.Context) { // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Endpoint ‡πÉ‡∏´‡πâ‡∏™‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
			id, err := strconv.ParseUint(c.Param("userID"), 10, 32)
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid user ID"})
				return
			}
			go func() {
				// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Logic ‡πÉ‡∏´‡∏°‡πà
				healthAnalysis.RunWeeklyAnalysisForSingleUser(context.Background(), uint(id))
			}()
			c.JSON(200, gin.H{"message": "Weekly analysis process started", "userID": id})
		})
		router.POST("/check-realtime-alert", gmail.SendRealtimeAlert)
		router.POST("/create-article/:id", article.CreateArticle)
		router.GET("/list-article", article.ListArticles)
		router.GET("/article/:id", article.GetArticleByID)
		router.PUT("/update-article/:id", article.UpdateArticle)
		router.DELETE("/delete-article/:id", article.DeleteArticle)
		router.PUT("/article/:id/publishArticleNow", article.PublishArticleNow)
		router.PUT("/article/:id/unpublishArticle", article.UnpublishArticle)
		router.GET("/list-healthSummary", healthSummary.ListHealthSummary)
		router.GET("/healthSummary/:id", healthSummary.GetHealthSummary)
		router.GET("/healthSummary/weekly/:id", healthSummary.GetWeeklySummary)
		router.GET("/list-healthAnalysis", healthAnalysis.ListHealthAnalysis)
		router.GET("/healthAnalysis/:id", healthAnalysis.GetHealthAnalysis)
		router.GET("/sleep-analysis/:id", healthAnalysis.GetSleepAnalysisByUser)
		router.POST("/analyze-with-gemini/:userID", healthAnalysis.AnalyzeWithGeminiHandler)
		router.POST("/health-data", healthAnalysis.SaveHealthDataHandler)
		router.GET("/list-healthData", healthData.ListHealthData)
		router.GET("/healthData/:id", healthData.GetHealthDataByUserID)
		router.GET("/healthData/weekly/:id", healthData.GetWeeklyHealthData)
		router.GET("/daily-heart-rate", healthData.GetDailyHeartRate)
		router.GET("/daily-steps", healthData.GetDailySteps)
		router.GET("/daily-calories", healthData.GetDailyCalories)
		router.GET("/daily-spo2", healthData.GetDailySpo2)
		router.GET("/daily-sleep", healthData.GetDailySleep)
		router.POST("/create-smartwatch/:id", smartwatchDevice.CreateSmartwatchDevice)
		router.GET("/smartwatch/:id", smartwatchDevice.GetSmartwatchDevice)
		router.GET("/admin-counts", adminCount.GetAdminCounts) // ‡πÉ‡∏ä‡πâ Alias 'adminCount'
	}

	r.GET("/genders", gender.GetAll) // ‡πÉ‡∏ä‡πâ Alias 'gender'
	r.GET("/", func(c *gin.Context) {
		c.String(http.StatusOK, "API RUNNING... PORT: %s", PORT)
	})

	 // üö© [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Real-time Health Monitoring ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    log.Println("‚ñ∂Ô∏è Starting Realtime Health Monitoring Job...")
    
    var usersToMonitor []entity.User
    // ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ RoleID ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÑ‡∏î‡πâ)
    if err := gormDB.Find(&usersToMonitor).Error; err != nil {
        log.Fatalf("Failed to fetch users for monitoring: %v", err)
    }

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    const monitorIntervalSeconds = 60 
    
    for _, user := range usersToMonitor {
        log.Printf("Starting monitoring goroutine for User ID: %d, Interval: %d seconds\n", user.ID, monitorIntervalSeconds)
        // ‡πÄ‡∏£‡∏¥‡πà‡∏° Goroutine ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
        go healthAnalysis.StartUserRealtimeAlertMonitoring(user.ID, monitorIntervalSeconds)
    }
    log.Println("‚úÖ Realtime Health Monitoring started.")

    // ---------------------------------------------------------------------------------------

	//go healthAnalysis.CheckForCriticalAlerts(context.Background())
	go healthAnalysis.WeeklyAnalysisJob(context.Background())
	r.Run("localhost:" + PORT)
}

func CORSMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Writer.Header().Set("Access-Control-Allow-Origin", "*")
		c.Writer.Header().Set("Access-Control-Allow-Credentials", "true")
		c.Writer.Header().Set("Access-Control-Allow-Headers", "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With")
		c.Writer.Header().Set("Access-Control-Allow-Methods", "POST, OPTIONS, GET, PUT, DELETE, PATCH")

		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}
		c.Next()
	}
}
