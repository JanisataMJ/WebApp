package healthData

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings" 
	"time"

	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/option"
	"google.golang.org/api/sheets/v4"

	appConfig "github.com/JanisataMJ/WebApp/config"
	"github.com/JanisataMJ/WebApp/controller/healthAnalysis"
)

// Constants
const spreadsheetID = "1FmctyPcIiSVvxx7CwXATXIVE1LKYyciQrqovYinyNn0"

// üí° ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏°‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î User ID ‡∏ï‡∏≤‡∏°‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå H)
var sourceToUserIDMap = map[string]int{
	"Zepp":            2,
	"OHealth":         3,
	"Samsung Health":  4,
	"Mibro Fit":       5,
}

// --- OAuth2 and Google Sheets API Setup (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á) ---
func getClient(config *oauth2.Config) *http.Client {
	tokFile := "token.json"
	tok, err := tokenFromFile(tokFile)
	if err != nil {
		tok = getTokenFromWeb(config)
		saveToken(tokFile, tok)
	}
	return config.Client(context.Background(), tok)
}

func getTokenFromWeb(config *oauth2.Config) *oauth2.Token {
	authURL := config.AuthCodeURL("state-token", oauth2.AccessTypeOffline)
	fmt.Printf("Go to the following link in your browser then type the "+
		"authorization code: \n%v\n", authURL)

	var authCode string
	if _, err := fmt.Scan(&authCode); err != nil {
		log.Fatalf("Unable to read authorization code: %v", err)
	}

	tok, err := config.Exchange(context.TODO(), authCode)
	if err != nil {
		log.Fatalf("Unable to retrieve token from web: %v", err)
	}
	return tok
}

func tokenFromFile(file string) (*oauth2.Token, error) {
	f, err := os.Open(file)
	if err != nil {
		return nil, err
	}
	defer f.Close()
	tok := &oauth2.Token{}
	err = json.NewDecoder(f).Decode(tok)
	return tok, err
}

func saveToken(path string, token *oauth2.Token) {
	fmt.Printf("Saving credential file to: %s\n", path)
	f, err := os.OpenFile(path, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0600)
	if err != nil {
		log.Fatalf("Unable to cache oauth token: %v", err)
	}
	defer f.Close()
	err = json.NewEncoder(f).Encode(token)
	if err != nil {
		log.Fatalf("Unable to save oauth token: %v", err)
	}
}

// --- Config Table and Row Tracking (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á) ---

// SetupConfigTable ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á config ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏µ‡∏ó
func SetupConfigTable(db *sql.DB) error {
	sqlStmt := `
	CREATE TABLE IF NOT EXISTS config (
		key TEXT PRIMARY KEY,
		value TEXT
	);
	`
	if _, err := db.Exec(sqlStmt); err != nil {
		return fmt.Errorf("failed to create config table: %w", err)
	}

	// üí° ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
	sheetsToTrack := []string{"HealthData_Daily", "HealthData_LatestAll"}

	for _, sheetName := range sheetsToTrack {
		key := fmt.Sprintf("last_imported_row_%s", sheetName)
		var count int
		err := db.QueryRow("SELECT COUNT(*) FROM config WHERE key = ?", key).Scan(&count)
		if err != nil {
			return fmt.Errorf("failed to check config key %s: %w", key, err)
		}

		if count == 0 {
			// ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏£‡∏Å (‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1 ‡∏Ñ‡∏∑‡∏≠ Header)
			_, err = db.Exec("INSERT INTO config (key, value) VALUES (?, '2')", key)
			if err != nil {
				return fmt.Errorf("failed to insert initial config value for %s: %w", key, err)
			}
		}
	}
	return nil
}

// getLastImportedRow ‡∏î‡∏∂‡∏á‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ó‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
func getLastImportedRow(db *sql.DB, sheetName string) int {
	key := fmt.Sprintf("last_imported_row_%s", sheetName) // üí° ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ó‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏µ‡∏¢‡πå
	var lastRowStr string
	err := db.QueryRow("SELECT value FROM config WHERE key = ?", key).Scan(&lastRowStr)
	if err != nil {
		log.Printf("Could not get %s, defaulting to 2: %v", key, err)
		return 2
	}
	lastRow, err := strconv.Atoi(lastRowStr)
	if err != nil {
		log.Printf("Could not parse %s value '%s', defaulting to 2: %v", key, lastRowStr, err)
		return 2
	}
	return lastRow
}

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "YYYY-MM-DD HH:MM:SS" ‡πÅ‡∏•‡∏∞ TrimSpace
func parseTime(timeStr string) (time.Time, error) {
	layouts := []string{
		"2/1/2006, 15:04:05",
		"2/1/2006 15:04:05",
		"1/2/2006, 15:04:05",
		"1/2/2006 15:04:05",
		"2006-01-02 15:04:05", 
	}

	trimmedTimeStr := strings.TrimSpace(timeStr)
	if strings.ToUpper(trimmedTimeStr) == "N/A" || trimmedTimeStr == "" {
		return time.Time{}, fmt.Errorf("time string is empty or N/A")
	}

	for _, layout := range layouts {
		t, err := time.Parse(layout, trimmedTimeStr)
		if err == nil {
			// ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö Truncate ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô)
			t = t.Truncate(time.Second) 
			return t, nil
		}
	}
	return time.Time{}, fmt.Errorf("failed to parse time string '%s' with any known layout", timeStr)
}

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ N/A ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° (ParseFloat)
func parseIntOrZero(value interface{}) int {
	s := strings.TrimSpace(fmt.Sprintf("%v", value))
	
	// üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö N/A (‡πÑ‡∏°‡πà‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å/‡πÉ‡∏´‡∏ç‡πà) ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
	if strings.ToUpper(s) == "N/A" || s == "" || s == "<nil>" || s == "null" {
		return 0 // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 0 ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô N/A ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á
	}
	
	// ‚úÖ ‡πÉ‡∏ä‡πâ ParseFloat ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
	floatValue, err := strconv.ParseFloat(s, 64)
	if err != nil {
		// ‚ö†Ô∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Log ‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö ParseFloat
		log.Printf("Warning: Failed to parse numeric value '%s' (not a valid number). Returning 0. Error: %v", s, err) 
		return 0 
	}
	
	// ‡∏ï‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏ó‡∏¥‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int
	return int(floatValue)
}

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ N/A ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ String (Sleep)
func parseStringOrEmpty(value interface{}) string {
	s := strings.TrimSpace(fmt.Sprintf("%v", value))
	
	// üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö N/A (‡πÑ‡∏°‡πà‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å/‡πÉ‡∏´‡∏ç‡πà) ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
	if strings.ToUpper(s) == "N/A" || s == "<nil>" || s == "null" {
		return "" // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á (empty string)
	}
	return s
}


// --- Main Import Logic (‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô parseIntOrZero ‡πÅ‡∏•‡∏∞ parseStringOrEmpty) ---

// ImportSheetData ‡∏Ñ‡∏∑‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets (‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ó) ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤ DB
func ImportSheetData(db *sql.DB, sheetName string) {
	actualReadStartRow := getLastImportedRow(db, sheetName)
	// ‡∏≠‡πà‡∏≤‡∏ô‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå H (Index 7) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå source
	readRange := fmt.Sprintf("%s!A%d:H", sheetName, actualReadStartRow)
	log.Printf("Health data import started for sheet: %s. Fetching range: %s", sheetName, readRange)

	b, err := os.ReadFile("credentials.json")
	if err != nil {
		log.Fatalf("Unable to read client secret file: %v", err)
	}
<<<<<<< HEAD
	// üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ 'config' ‡πÄ‡∏õ‡πá‡∏ô 'oauthConfig'
=======
>>>>>>> f729ad321d13e39fac387080b4b03f87a909d160
	oauthConfig, err := google.ConfigFromJSON(b, sheets.SpreadsheetsReadonlyScope)
	if err != nil {
		log.Fatalf("Unable to parse client secret file to config: %v", err)
	}
<<<<<<< HEAD
	// üí° ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å getClient
=======
>>>>>>> f729ad321d13e39fac387080b4b03f87a909d160
	client := getClient(oauthConfig)
	srv, err := sheets.NewService(context.Background(), option.WithHTTPClient(client))
	if err != nil {
		log.Fatalf("Unable to retrieve Sheets client: %v", err)
	}

	resp, err := srv.Spreadsheets.Values.Get(spreadsheetID, readRange).Do()
	if err != nil || resp.Values == nil || len(resp.Values) == 0 {
		log.Printf("No new data found or error retrieving data from %s: %v", sheetName, err)
		return
	}
	fmt.Printf("New data retrieved from %s. Importing to SQLite...\n", sheetName)

	sqlStmt := `
	CREATE TABLE IF NOT EXISTS health_data (
		user_id INTEGER,
		timestamp DATETIME,
		bpm INTEGER,
		steps INTEGER,
		spo2 INTEGER,
		sleep_hours TEXT,
		calories_burned INTEGER,
		UNIQUE(user_id, timestamp)
	);
	`
	if _, err = db.Exec(sqlStmt); err != nil {
		log.Printf("Failed to create table: %v", err)
		return
	}

	tx, err := db.Begin()
	if err != nil {
		log.Fatal(err)
	}
	// üéØ ‡πÉ‡∏ä‡πâ INSERT OR IGNORE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏ï‡∏≤‡∏° UNIQUE(user_id, timestamp)
	stmt, err := tx.Prepare("INSERT OR IGNORE INTO health_data(user_id, timestamp, bpm, steps , spo2, sleep_hours, calories_burned) VALUES(?, ?, ?, ?, ?, ?, ?)")
	if err != nil {
		log.Fatal(err)
	}
	defer stmt.Close()

	dataRows := resp.Values
	rowsProcessed := 0
<<<<<<< HEAD

	userIndex, timeIndex, heartRateIndex, stepsIndex, spo2Index, sleepIndex, caloriesIndex := 0, 1, 2, 3, 4, 5, 6
=======
	
	// B=1: timestamp | C=2: bpm | D=3: steps | E=4: spo2 | F=5: sleep_hours | G=6: calories_burned | H=7: source
	timeIndex, heartRateIndex, stepsIndex, spo2Index, sleepIndex, caloriesIndex, sourceIndex := 1, 2, 3, 4, 5, 6, 7 
>>>>>>> f729ad321d13e39fac387080b4b03f87a909d160

	for _, row := range dataRows {
		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå H (Index 7)
		if len(row) <= sourceIndex { 
			log.Printf("Skipping row in %s due to insufficient columns (expected H): %v", sheetName, row)
			continue
		}

		// 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î user_id ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå H (sourceIndex)
		sourceStr := strings.TrimSpace(fmt.Sprintf("%v", row[sourceIndex])) 
		
		userID, found := sourceToUserIDMap[sourceStr]
		if !found {
			log.Printf("Skipping row in %s: Unknown device source '%s' in column H. Cannot assign user_id.", sheetName, sourceStr)
			continue
		}

		// 2. ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (Timestamp) - ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
		timeStr := fmt.Sprintf("%v", row[timeIndex])
		t, err := parseTime(timeStr)
		if err != nil {
			log.Printf("Skipping row in %s: Failed to parse timestamp '%s'. Error: %v", sheetName, timeStr, err)
			continue
		}
		// ‡∏Å‡∏≤‡∏£ Format ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÉ‡∏ä‡πâ Timestamp ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å Truncate ‡πÅ‡∏•‡πâ‡∏ß
		formattedTime := t.Format("2006-01-02 15:04:05")

		// 3. ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡πÉ‡∏ä‡πâ parseIntOrZero ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°)
		bpm := parseIntOrZero(row[heartRateIndex])
		steps := parseIntOrZero(row[stepsIndex])
		spo2 := parseIntOrZero(row[spo2Index])
		caloriesBurned := parseIntOrZero(row[caloriesIndex])

		// 4. ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ String (Sleep) 
		sleepHours := parseStringOrEmpty(row[sleepIndex])

<<<<<<< HEAD
		sleepHours := fmt.Sprintf("%v", row[sleepIndex])

		var caloriesBurned float64
		caloriesStr := fmt.Sprintf("%v", row[caloriesIndex])
		if caloriesStr != "" && caloriesStr != "<nil>" && caloriesStr != "null" {
			// ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float ‡∏Å‡πà‡∏≠‡∏ô
			if val, err := strconv.ParseFloat(caloriesStr, 64); err == nil {
				caloriesBurned = val
			} else {
				log.Printf("Failed to parse calories '%s': %v", caloriesStr, err)
			}
		}

		// ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô SQL statement ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ float64 ‡πÅ‡∏ó‡∏ô int
		stmt, err := tx.Prepare("INSERT OR IGNORE INTO health_data(user_id, timestamp, bpm, steps , spo2, sleep_hours, calories_burned) VALUES(?, ?, ?, ?, ?, ?, ?)")
		if err != nil {
			log.Fatal(err)
		}

		// ‡πÉ‡∏ô stmt.Exec ‡∏™‡πà‡∏á caloriesBurned ‡πÄ‡∏õ‡πá‡∏ô float64
=======

		// 5. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (INSERT OR IGNORE ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô)
>>>>>>> f729ad321d13e39fac387080b4b03f87a909d160
		_, err = stmt.Exec(userID, formattedTime, bpm, steps, spo2, sleepHours, caloriesBurned)
		if err != nil {
			log.Printf("Failed to insert row for user %d (Source: %s) at time %s from %s: %v", userID, sourceStr, formattedTime, sheetName, err)
		}

		rowsProcessed++
	}

	if err := tx.Commit(); err != nil {
		log.Fatalf("Failed to commit transaction for %s: %v", sheetName, err)
	}

	// 6. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
	if rowsProcessed > 0 {
		newLastRow := actualReadStartRow + rowsProcessed
		key := fmt.Sprintf("last_imported_row_%s", sheetName)
		// ‡πÉ‡∏ä‡πâ INSERT OR REPLACE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
		_, err = db.Exec("INSERT OR REPLACE INTO config (key, value) VALUES (?, ?)", key, strconv.Itoa(newLastRow))
		if err != nil {
			log.Fatalf("Failed to update %s in config: %v", key, err)
		}
<<<<<<< HEAD
		fmt.Printf("Data import finished. Successfully processed %d new rows. Next read will start at row %d.\n", rowsProcessed, newLastRow)
		fmt.Println("Starting HealthAnalysis...")
		// üí° ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡πÇ‡∏î‡∏¢‡∏î‡∏∂‡∏á *gorm.DB ‡∏à‡∏≤‡∏Å config.DB()
		healthAnalysis.AnalyzeHealthData(appConfig.DB())
		fmt.Println("HealthAnalysis completed.")
=======
		fmt.Printf("Data import for %s finished. Successfully processed %d new rows. Next read will start at row %d.\n", sheetName, rowsProcessed, newLastRow)
>>>>>>> f729ad321d13e39fac387080b4b03f87a909d160
	} else {
		fmt.Printf("Data import for %s finished. No new rows were processed.\n", sheetName)
	}
}

// StartDataImportJob ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á ImportSheetData ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ä‡∏µ‡∏ó (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
func StartDataImportJob(sqlDB *sql.DB) {
	ticker := time.NewTicker(1 * time.Minute)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			// 1. ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å HealthData_Daily
			ImportSheetData(sqlDB, "HealthData_Daily")

			// 2. ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å HealthData_LatestAll
			ImportSheetData(sqlDB, "HealthData_LatestAll")
			
			// 3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ HealthAnalysis ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
			fmt.Println("Starting HealthAnalysis...")
			healthAnalysis.AnalyzeHealthData(appConfig.DB())
			fmt.Println("HealthAnalysis completed.")
		}
	}
}
