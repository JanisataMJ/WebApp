package gmail

import (
	"fmt"
	"log"
	"net/http"
	/* "net/smtp" */
	"os"
	"time"
	"strconv"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
	"gopkg.in/gomail.v2"

	"github.com/JanisataMJ/WebApp/config"
	"github.com/JanisataMJ/WebApp/entity"
)


// sendEmail ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏ö‡∏ö production-ready
// to: ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
// subject: ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
// body: ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö HTML)
// attachments: array ‡∏Ç‡∏≠‡∏á path ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ô‡∏ö
func sendEmail(to string, subject string, body string, attachments ...string) error {
	from := os.Getenv("EMAIL_USER")
	pass := os.Getenv("EMAIL_PASS")
	smtpHost := os.Getenv("SMTP_HOST")
	smtpPort := os.Getenv("SMTP_PORT")

	if from == "" || pass == "" || smtpHost == "" || smtpPort == "" {
		return fmt.Errorf("missing email environment variables")
	}

	port, err := strconv.Atoi(smtpPort)
	if err != nil {
		return fmt.Errorf("invalid SMTP_PORT: %v", err)
	}

	m := gomail.NewMessage()
	m.SetHeader("From", from)
	m.SetHeader("To", to)
	m.SetHeader("Subject", subject)
	m.SetBody("text/html", body) // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö HTML

	// ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
	for _, file := range attachments {
		if _, err := os.Stat(file); err == nil {
			m.Attach(file)
		} else {
			fmt.Printf("‚ö†Ô∏è  Attachment not found: %s\n", file)
		}
	}

	d := gomail.NewDialer(smtpHost, port, from, pass)

	if err := d.DialAndSend(m); err != nil {
		fmt.Println("‚ùå Failed to send email:", err)
		return err
	}

	fmt.Println("‚úÖ Email sent to:", to)
	return nil
}

// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 1)
func SendImmediateAlert(c *gin.Context, db *gorm.DB, user entity.User, healthTypeID uint, message string) {
	notification := entity.Notification{
		Timestamp:            time.Now(),
		Title:                "üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥",
		Message:              message,
		UserID:               user.ID,
		HealthTypeID:         healthTypeID,
		NotificationStatusID: 2,
	}

	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB
	if err := db.Create(&notification).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	// ‡πÇ‡∏´‡∏•‡∏î Notification ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° relation
	if err := db.Preload("HealthType").
		Preload("Trend").
		Preload("NotificationStatus").
		First(&notification, notification.ID).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to preload notification"})
		return
	}

	// ‡∏™‡πà‡∏á Email
	err := sendEmail(user.Email, "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", message)
	if err != nil {
		log.Println("‚ùå ‡∏™‡πà‡∏á Email ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err)
	}

	// ‡∏™‡πà‡∏á response ‡∏Å‡∏•‡∏±‡∏ö
	c.JSON(http.StatusOK, gin.H{
		"message": "‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
		"data":    notification,
	})
}

func SendRealtimeAlert(c *gin.Context) {
	var data entity.HealthData
	if err := c.ShouldBindJSON(&data); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	db := config.DB()

	// ‡∏´‡∏≤ user ‡∏ï‡∏≤‡∏° userID ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
	var user entity.User
	if err := db.First(&user, data.UserID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "User not found"})
		return
	}

	alerts := ""
	if data.Bpm < 50 {
		alerts += fmt.Sprintf("- ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ï‡πà‡∏≥: %d bpm\n", data.Bpm)
	} else if data.Bpm > 120 {
		alerts += fmt.Sprintf("- ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏™‡∏π‡∏á: %d bpm\n", data.Bpm)
	}
	if data.Spo2 < 90 {
		alerts += fmt.Sprintf("- ‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏ã‡∏¥‡πÄ‡∏à‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ï‡πà‡∏≥: %.2f%%\n", data.Spo2)
	}

	if alerts != "" {
		if user.RoleID == 2 {
			// ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ User ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤
			SendImmediateAlert(c, db, user, 1, alerts)
		} else {
			c.JSON(http.StatusOK, gin.H{"message": "Alert detected ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Role != User"})
		}
	} else {
		c.JSON(http.StatusOK, gin.H{"message": "‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"})
	}
}


// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å UserID ‡πÑ‡∏î‡πâ)
func SendWeeklySummary(db *gorm.DB, userID uint) {
	var summary entity.HealthSummary

	// ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏±‡πâ‡∏ô
	if err := db.Preload("User").
		Where("user_id = ?", userID).
		Order("period_end desc").
		First(&summary).Error; err != nil {
		log.Printf("error fetching latest weekly summary: %v", err)
		return
	}

	if summary.User == nil || summary.User.RoleID != 2 {
		return // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ role User
	}

	summaryText := fmt.Sprintf(
		"üìä Weekly Health Summary (Week %d)\n"+
			"‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: %s ‡∏ñ‡∏∂‡∏á %s\n\n"+
			"- Heart Rate: ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ %.1f bpm (‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î %d, ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î %d)\n"+
			"- Steps: ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ %.1f, ‡∏£‡∏ß‡∏° %d ‡∏Å‡πâ‡∏≤‡∏ß\n"+
			"- Sleep: ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ %.1f ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\n"+
			"- Calories: ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ %.1f kcal\n"+
			"- SpO‚ÇÇ: ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ %.1f%%\n"+
			"- Body Temp: ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ %.1f ¬∞C (‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î %.1f, ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î %.1f)\n",
		summary.WeekNumber,
		summary.PeriodStart.Format("2006-01-02"),
		summary.PeriodEnd.Format("2006-01-02"),
		summary.AvgBpm, summary.MinBpm, summary.MaxBpm,
		summary.AvgSteps, summary.TotalSteps,
		summary.AvgSleep,
		summary.AvgCalories,
		summary.AvgSpo2,
	)

	// ‚úÖ ‡∏™‡πà‡∏á email ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
	if err := sendEmail(summary.User.Email, "Weekly Health Summary", summaryText); err != nil {
		log.Printf("failed to send email: %v", err)
	}

	// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Notification
	notif := entity.Notification{
		Timestamp:            time.Now(),
		Title:                fmt.Sprintf("Weekly Health Summary (Week %d)", summary.WeekNumber),
		Message:              summaryText,
		UserID:               summary.UserID,
		HealthSummaryID:      &summary.ID,
		NotificationStatusID: 1,
	}
	if err := db.Create(&notif).Error; err != nil {
		log.Printf("failed to save weekly summary notification: %v", err)
	}
}

