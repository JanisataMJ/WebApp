package healthSummary

import (
	"fmt"
	"net/http"
	"strconv"
	"strings"
	"time"

	appConfig "github.com/JanisataMJ/WebApp/config"
	"github.com/JanisataMJ/WebApp/controller/healthData"
	"github.com/JanisataMJ/WebApp/entity"
	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

// HealthSummaryResponse üí° Struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏≤‡∏á API (GetWeeklySummary)
type HealthSummaryResponse struct {
	PeriodStart string  `json:"period_start"`
	PeriodEnd   string  `json:"period_end"`
	AvgBpm      float64 `json:"avg_bpm"`
	MinBpm      uint    `json:"min_bpm"`
	MaxBpm      uint    `json:"max_bpm"`
	AvgSteps    float64 `json:"avg_steps"`
	TotalSteps  int64   `json:"total_steps"`
	AvgSleep    float64 `json:"avg_sleep"`
	AvgCalories float64 `json:"avg_calories"`
	AvgSpo2     float64 `json:"avg_spo2"`
	WeekNumber  uint    `json:"week_number"`
	RiskLevel   string  `json:"risk_level"`
}

// ----------------------------------------------------
// üí° Utility Function
// ----------------------------------------------------

// ParseSleepHours ‡πÅ‡∏õ‡∏•‡∏á "7 h. 30 m." ‡πÄ‡∏õ‡πá‡∏ô 7.5
func ParseSleepHours(s string) float64 {
	if s == "" {
		return 0.0
	}

	parts := strings.FieldsFunc(s, func(r rune) bool {
		return r == 'h' || r == 'm' || r == '.' || r == ' '
	})

	var h, m float64
	if len(parts) >= 1 {
		hStr := strings.TrimSpace(parts[0])
		hVal, err := strconv.ParseFloat(hStr, 64)
		if err == nil {
			h = hVal
		}
	}

	if len(parts) >= 2 {
		mStr := strings.TrimSpace(parts[1])
		mVal, err := strconv.ParseFloat(mStr, 64)
		if err == nil {
			m = mVal
		}
	}

	return h + (m / 60.0)
}

// ----------------------------------------------------
// ‚úÖ Core Logic: Calculate Summary
// ----------------------------------------------------

// CalculateSummary ‡∏î‡∏∂‡∏á HealthData ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
func CalculateSummary(db *gorm.DB, userID string, startDate, endDate time.Time) (HealthSummaryResponse, error) {
	var healthDatas []entity.HealthData

	// üí° ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° UserID ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
	if err := db.Where("user_id = ? AND timestamp BETWEEN ? AND ?", userID, startDate, endDate).
		Find(&healthDatas).Error; err != nil {
		return HealthSummaryResponse{}, fmt.Errorf("failed to fetch health data: %w", err)
	}

	if len(healthDatas) == 0 {
		return HealthSummaryResponse{}, fmt.Errorf("no health data found for summary period")
	}

	var totalSleep, totalBpm, totalCalories, totalSpo2 float64
	var totalSteps int64
	var minBpm, maxBpm uint = 300, 0 // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Min/Max ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

	for i, hd := range healthDatas {
		// ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì MinBpm, MaxBpm ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢ (Bpm > 0)
		if hd.Bpm > 0 {
			if i == 0 || hd.Bpm < minBpm {
				minBpm = hd.Bpm
			}
			if hd.Bpm > maxBpm {
				maxBpm = hd.Bpm
			}
		}

		totalSleep += ParseSleepHours(hd.SleepHours)
		totalBpm += float64(hd.Bpm)
		totalSteps += hd.Steps
		totalCalories += hd.CaloriesBurned
		totalSpo2 += hd.Spo2
	}

	count := float64(len(healthDatas))
	avgSleep := totalSleep / count
	avgBpm := totalBpm / count
	avgSteps := float64(totalSteps) / count
	avgCalories := totalCalories / count
	avgSpo2 := totalSpo2 / count

	_, weekNum := startDate.ISOWeek()

	// ‡∏î‡∏∂‡∏á RiskLevel ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• API)
	var healthSummary entity.HealthSummary
	riskLevelStr := "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
	if err := db.Preload("RiskLevel").
		Where("user_id = ? AND period_start <= ?", userID, time.Now()). // ‡∏´‡∏≤ Summary ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
		Order("period_start DESC").
		First(&healthSummary).Error; err == nil && healthSummary.RiskLevel.Rlevel != "" {
		riskLevelStr = healthSummary.RiskLevel.Rlevel
	}

	result := HealthSummaryResponse{
		PeriodStart: startDate.Format("2006-01-02"),
		PeriodEnd:   endDate.Format("2006-01-02"),
		AvgBpm:      avgBpm,
		MinBpm:      minBpm,
		MaxBpm:      maxBpm,
		TotalSteps:  totalSteps,
		AvgSteps:    avgSteps,
		AvgSleep:    avgSleep,
		AvgCalories: avgCalories,
		AvgSpo2:     avgSpo2,
		WeekNumber:  uint(weekNum),
		RiskLevel:   riskLevelStr,
	}

	return result, nil
}

// ----------------------------------------------------
// ‚úÖ Service Function: Create & Update Summary (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Import Job)
// ----------------------------------------------------

// CreateWeeklySummaries ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï HealthSummary ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô DB
// üí° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ Import/Analysis ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
func CreateWeeklySummaries(db *gorm.DB, userID string) {
	// 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Summary (‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß)
	today := time.Now()

	// ‡∏´‡∏≤‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå, ‡∏à‡∏ö‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå)
	weekday := int(today.Weekday())
	if weekday == 0 {
		weekday = 7
	} // Sunday = 7

	// ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤ EndDate ‡πÄ‡∏õ‡πá‡∏ô 23:59:59 ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
	endOfLastWeek := time.Date(today.Year(), today.Month(), today.Day(), 23, 59, 59, 0, today.Location()).AddDate(0, 0, -weekday)
	// ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤ StartDate ‡πÄ‡∏õ‡πá‡∏ô 00:00:00 ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
	startOfLastWeek := time.Date(endOfLastWeek.Year(), endOfLastWeek.Month(), endOfLastWeek.Day(), 0, 0, 0, 0, endOfLastWeek.Location()).AddDate(0, 0, -6)

	// üí° ‡πÄ‡∏û‡∏¥‡πà‡∏° Log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
	fmt.Printf("Attempting to create summary for User: %s, Period: %s to %s\n", userID, startOfLastWeek.Format("2006-01-02"), endOfLastWeek.Format("2006-01-02"))

	// 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Summary
	summaryData, err := CalculateSummary(db, userID, startOfLastWeek, endOfLastWeek)

	if err != nil {
		// üí° ‡∏´‡∏≤‡∏Å‡∏°‡∏µ Error ‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
		fmt.Printf("Warning: Skipping summary creation for User %s: %v\n", userID, err)
		return // ‚ö†Ô∏è ‡∏´‡∏≤‡∏Å err ‡∏Ñ‡∏∑‡∏≠ "no health data found for summary period" ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏¥‡∏î
	}

	// 3. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° RiskLevelID (‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ ID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å DB)
	var lNormal entity.RiskLevel
	// ‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ RiskLevel
	if err := db.First(&lNormal, "rlevel = ?", "‡∏õ‡∏Å‡∏ï‡∏¥").Error; err != nil {
		fmt.Printf("Error: Could not find RiskLevel '‡∏õ‡∏Å‡∏ï‡∏¥'. Please run seed data. %v\n", err)
		return // ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡∏´‡∏≤ RiskLevel ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
	}

	// ‡πÅ‡∏õ‡∏•‡∏á string userID ‡πÄ‡∏õ‡πá‡∏ô uint
	userIDUint, err := strconv.ParseUint(userID, 10, 32)
	if err != nil {
		fmt.Printf("Error: Invalid User ID provided: %v\n", err)
		return
	}

	// 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Entity ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
	summaryEntity := entity.HealthSummary{
		PeriodStart: startOfLastWeek,
		PeriodEnd:   endOfLastWeek,
		AvgBpm:      summaryData.AvgBpm,
		MinBpm:      summaryData.MinBpm,
		MaxBpm:      summaryData.MaxBpm,
		AvgSteps:    summaryData.AvgSteps,
		TotalSteps:  int(summaryData.TotalSteps), // ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô int
		AvgSleep:    summaryData.AvgSleep,
		AvgCalories: summaryData.AvgCalories,
		AvgSpo2:     summaryData.AvgSpo2,
		WeekNumber:  summaryData.WeekNumber,
		UserID:      uint(userIDUint),
		RiskLevelID: lNormal.ID, // ‡πÉ‡∏ä‡πâ ID ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
		TrendsID:    1,          // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
	}

	// 5. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï HealthSummary (Upsert Logic)
	var existingSummary entity.HealthSummary
	// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Summary ‡∏Ç‡∏≠‡∏á User ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
	result := db.Where("user_id = ? AND period_start = ?", summaryEntity.UserID, summaryEntity.PeriodStart).First(&existingSummary)

	if result.Error == gorm.ErrRecordNotFound {
		if createErr := db.Create(&summaryEntity).Error; createErr != nil {
			fmt.Printf("GORM ERROR on CREATE Summary: %v\n", createErr)
		} else {
			fmt.Println("SUCCESS: New HealthSummary record created.") // üí° ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
		}
	} else {
		if updateErr := db.Model(&existingSummary).Updates(summaryEntity).Error; updateErr != nil {
			fmt.Printf("GORM ERROR on UPDATE Summary: %v\n", updateErr)
		} else {
			fmt.Println("SUCCESS: Existing HealthSummary record updated.") // üí° ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
		}
	}
}

// ----------------------------------------------------
// üåê API Handlers (RESTful Endpoints)
// ----------------------------------------------------

// GET /health-summary
func ListHealthSummary(c *gin.Context) {
	var summary []entity.HealthSummary

	// ‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° Preload User ‡πÅ‡∏•‡∏∞ RiskLevel
	if err := appConfig.DB().
		Preload("User").
		Preload("RiskLevel").
		Find(&summary).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, summary)
}

// GET /health-summary/:id
func GetHealthSummary(c *gin.Context) {
	id := c.Param("id")
	summaryID, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid ID"})
		return
	}

	var summary entity.HealthSummary

	// ‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° Preload User, Notification, RiskLevel
	if err := appConfig.DB().
		Preload("User").
		Preload("Notification").
		Preload("RiskLevel").
		First(&summary, summaryID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "HealthSummary not found"})
		return
	}

	c.JSON(http.StatusOK, summary)
}

// ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô package healthData ‡∏´‡∏£‡∏∑‡∏≠ entity
type DailyData struct {
	Date       string  `json:"date"`
	AvgBpm     float64 `json:"avg_bpm"`
	Steps      int64   `json:"steps"`
	SleepHours string  `json:"sleep_hours"`
	Calories   float64 `json:"calories"`
	AvgSpo2    float64 `json:"avg_spo2"`
}

func GetWeeklySummary(c *gin.Context) {
	userID := c.Param("id")
	mode := c.DefaultQuery("mode", "weekly") // weekly | lastweek | last2weeks

	db := c.MustGet("db").(*gorm.DB)

	var internalData []healthData.DailyData
	var err error

	switch mode {
	case "weekly":
		internalData, err = healthData.GetWeeklyHealthDataInternal(db, userID, "weekly")
	case "lastweek":
		internalData, err = healthData.GetWeeklyHealthDataInternal(db, userID, "lastweek")
	case "last2weeks":
		internalData, err = healthData.GetWeeklyHealthDataInternal(db, userID, "last2weeks")
	default:
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid mode"})
		return
	}

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	// ‡πÅ‡∏õ‡∏•‡∏á type
	dailyData := make([]DailyData, len(internalData))
	for i, d := range internalData {
		dailyData[i] = DailyData{
			Date:       d.Date,
			AvgBpm:     d.AvgBpm,
			Steps:      d.Steps,
			SleepHours: d.SleepHours,
			Calories:   d.Calories,
			AvgSpo2:    d.AvgSpo2,
		}
	}

	if len(dailyData) == 0 {
		c.JSON(http.StatusNotFound, gin.H{"error": "No health data found"})
		return
	}

	// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì summary ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
	var sumBpm, sumSpo2, sumCalories float64
	var sumSteps int64
	var totalSleepMinutes int64
	var sleepCount int64

	for _, d := range dailyData {
		sumBpm += d.AvgBpm
		sumSpo2 += d.AvgSpo2
		sumCalories += d.Calories
		sumSteps += d.Steps

		if d.SleepHours != "" {
			var h, m int64
			fmt.Sscanf(d.SleepHours, "%dh %dm", &h, &m)
			totalSleepMinutes += h*60 + m
			sleepCount++
		}
	}

	count := float64(len(dailyData))
	avgBpm := sumBpm / count
	avgSpo2 := sumSpo2 / count
	avgCalories := sumCalories / count

	var avgSleep string
	if sleepCount > 0 {
		minutes := totalSleepMinutes / sleepCount
		h := minutes / 60
		m := minutes % 60
		avgSleep = fmt.Sprintf("%dh %dm", h, m)
	} else {
		avgSleep = "0h 0m"
	}

	summary := map[string]interface{}{
		"avg_bpm":      avgBpm,
		"avg_spo2":     avgSpo2,
		"total_steps":  sumSteps,
		"avg_calories": avgCalories,
		"avg_sleep":    avgSleep,
	}

	c.JSON(http.StatusOK, summary)
}

// ----------------------------------------------------
// ‚úÖ Public Service Function for Job Runner (main.go)
// ----------------------------------------------------

// CreateSummariesForAllRecentUsers ‡∏î‡∏∂‡∏á UserID ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å HealthData ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á HealthSummary ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏ô
// üí° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Job/Scheduler (‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ô main.go)
func CreateSummariesForAllRecentUsers(db *gorm.DB) {
	var distinctUserIDs []uint

	// 1. ‡∏î‡∏∂‡∏á UserID ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å HealthData ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
	// ¬† ¬†‡πÉ‡∏ä‡πâ Pluck ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå user_id ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤)
	result := db.Model(&entity.HealthData{}).
		Distinct().
		Pluck("user_id", &distinctUserIDs)

	if result.Error != nil {
		fmt.Printf("Error fetching distinct user IDs: %v\n", result.Error)
		return
	}

	if len(distinctUserIDs) == 0 {
		fmt.Println("No distinct users found in HealthData table to generate HealthSummary.")
		return
	}

	fmt.Printf("Starting HealthSummary creation for %d distinct user(s)...\n", len(distinctUserIDs))

	// 2. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å CreateWeeklySummaries ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
	for _, userID := range distinctUserIDs {
		userIDStr := strconv.Itoa(int(userID))

		// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
		CreateWeeklySummaries(db, userIDStr)
	}

	fmt.Println("‚úÖ All weekly Health Summaries checked/updated.")
}

// ----------------------------------------------------
// ‚úÖ Backfill Service Function (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Summary ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á)
// ----------------------------------------------------

// BackfillAllWeeklySummaries ‡∏™‡∏£‡πâ‡∏≤‡∏á HealthSummary ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
func BackfillAllWeeklySummaries(db *gorm.DB, userID string) {
	var firstRecord entity.HealthData

	// 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ‡∏ô‡∏µ‡πâ
	err := db.Where("user_id = ?", userID).Order("timestamp ASC").Limit(1).First(&firstRecord).Error
	if err != nil {
		fmt.Printf("Warning: No health data found for user %s to backfill: %v\n", userID, err)
		return
	}

	// 2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î

	// ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î
	oldestDate := firstRecord.Timestamp
	weekday := int(oldestDate.Weekday())
	if weekday == 0 {
		weekday = 7 // Sunday is the 7th day
	}
	// startOfFirstWeek ‡∏Ñ‡∏∑‡∏≠ ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå 00:00:00 ‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î
	startOfFirstWeek := oldestDate.AddDate(0, 0, -(weekday - 1)).Truncate(24 * time.Hour)

	// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ: ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤)
	today := time.Now()
	todayWeekday := int(today.Weekday())
	if todayWeekday == 0 {
		todayWeekday = 7
	}
	// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ)
	currentStart := today.AddDate(0, 0, -(todayWeekday - 1)).Truncate(24 * time.Hour)

	count := 0

	// 3. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡∏•‡∏∞‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
	// ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (currentStart) ‡∏à‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÅ‡∏£‡∏Å (startOfFirstWeek)
	for currentStart.After(startOfFirstWeek) || currentStart.Equal(startOfFirstWeek) {

		// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Period End ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå 23:59:59 ‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏±‡πâ‡∏ô
		endDate := currentStart.AddDate(0, 0, 6).Add(23*time.Hour + 59*time.Minute + 59*time.Second)
		startDate := currentStart

		// 4. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Summary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (startDate - endDate)
		summaryData, err := CalculateSummary(db, userID, startDate, endDate)

		if err == nil {
			// Logic ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (Upsert)
			var lNormal entity.RiskLevel
			if err := db.First(&lNormal, "rlevel = ?", "‡∏õ‡∏Å‡∏ï‡∏¥").Error; err != nil {
				// ‡∏´‡∏≤‡∏Å‡∏´‡∏≤ RiskLevel ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ Log ‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡πâ‡∏≤‡∏°
				fmt.Printf("Error: Could not find RiskLevel '‡∏õ‡∏Å‡∏ï‡∏¥'. Please run seed data. %v\n", err)
				currentStart = currentStart.AddDate(0, 0, -7) // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
				continue
			}

			userIDUint, _ := strconv.ParseUint(userID, 10, 32)

			summaryEntity := entity.HealthSummary{
				PeriodStart: startDate,
				PeriodEnd:   endDate,
				AvgBpm:      summaryData.AvgBpm,
				MinBpm:      summaryData.MinBpm,
				MaxBpm:      summaryData.MaxBpm,
				AvgSteps:    summaryData.AvgSteps,
				TotalSteps:  int(summaryData.TotalSteps),
				AvgSleep:    summaryData.AvgSleep,
				AvgCalories: summaryData.AvgCalories,
				AvgSpo2:     summaryData.AvgSpo2,
				WeekNumber:  summaryData.WeekNumber,
				UserID:      uint(userIDUint),
				RiskLevelID: lNormal.ID,
				TrendsID:    1,
			}

			var existingSummary entity.HealthSummary
			result := db.Where("user_id = ? AND period_start = ?", summaryEntity.UserID, summaryEntity.PeriodStart).First(&existingSummary)

			if result.Error == gorm.ErrRecordNotFound {
				if createErr := db.Create(&summaryEntity).Error; createErr != nil {
					fmt.Printf("GORM ERROR on BACKFILL CREATE Summary (%s): %v\n", startDate.Format("2006-01-02"), createErr)
				} else {
					fmt.Printf("SUCCESS: Backfill HealthSummary created for User %s, Week %s.\n", userID, startDate.Format("2006-01-02"))
					count++
				}
			} else {
				if updateErr := db.Model(&existingSummary).Updates(summaryEntity).Error; updateErr != nil {
					fmt.Printf("GORM ERROR on BACKFILL UPDATE Summary (%s): %v\n", startDate.Format("2006-01-02"), updateErr)
				} else {
					fmt.Printf("SUCCESS: Backfill HealthSummary updated for User %s, Week %s.\n", userID, startDate.Format("2006-01-02"))
					count++
				}
			}
		} else {
			fmt.Printf("Warning: Skipping Backfill for User %s, Week starting %s: %v\n", userID, startDate.Format("2006-01-02"), err)
		}

		// 5. ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏õ 1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
		currentStart = currentStart.AddDate(0, 0, -7)
	}

	fmt.Printf("‚úÖ Backfill completed for user %s. %d summaries processed.\n", userID, count)
}

// ----------------------------------------------------
// ‚úÖ Public Service Function for Job Runner (main.go)
// ----------------------------------------------------

// RunSummaryJob ‡∏î‡∏∂‡∏á UserID ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å HealthData ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Summary ‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
// üí° ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà CreateSummariesForAllRecentUsers ‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ
func RunSummaryJob(db *gorm.DB, isBackfill bool) {
	var distinctUserIDs []uint

	// 1. ‡∏î‡∏∂‡∏á UserID ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å HealthData
	result := db.Model(&entity.HealthData{}).
		Distinct().
		Pluck("user_id", &distinctUserIDs)

	if result.Error != nil {
		fmt.Printf("Error fetching distinct user IDs: %v\n", result.Error)
		return
	}

	if len(distinctUserIDs) == 0 {
		fmt.Println("No distinct users found in HealthData table to generate HealthSummary.")
		return
	}

	if isBackfill {
		fmt.Printf("Starting FULL BACKFILL for %d distinct user(s)...\n", len(distinctUserIDs))
	} else {
		fmt.Printf("Starting WEEKLY Summary creation for %d distinct user(s) (Last Week)...\n", len(distinctUserIDs))
	}

	// 2. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
	for _, userID := range distinctUserIDs {
		userIDStr := strconv.Itoa(int(userID))

		if isBackfill {
			// ‡∏£‡∏±‡∏ô Backfill: ‡∏™‡∏£‡πâ‡∏≤‡∏á Summary ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
			BackfillAllWeeklySummaries(db, userIDStr)
		} else {
			// ‡∏£‡∏±‡∏ô Weekly: ‡∏™‡∏£‡πâ‡∏≤‡∏á Summary ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
			CreateWeeklySummaries(db, userIDStr)
		}
	}

	fmt.Println("‚úÖ Summary Job completed.")
}
