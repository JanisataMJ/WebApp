package gmail

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
	"gopkg.in/gomail.v2"
	"gorm.io/gorm"

	"github.com/JanisataMJ/WebApp/config"
	"github.com/JanisataMJ/WebApp/entity"
)

// ... (SendEmail ‡πÅ‡∏•‡∏∞ SendImmediateAlertBackground ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà) ...

// ‚úÖ [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Goroutine Background
func SendImmediateAlertBackground(db *gorm.DB, user entity.User, healthTypeID uint, message string) {
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Notification ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Email) ...
    notification := entity.Notification{
        Timestamp:time.Now(),
        Title:"üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥",
        Message: message,
        UserID: user.ID,
        HealthTypeID:2,
        NotificationStatusID: 2,
    }

    if err := db.Create(&notification).Error; err != nil {
        log.Printf("‚ùå Failed to save notification in background: %v\n", err)
        return
    }

    err := SendEmail(user.Email, "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", message)
    if err != nil {
        log.Println("‚ùå ‡∏™‡πà‡∏á Email ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err)
    }
}


// POST /check-realtime-alert
// üö© [‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á] ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å DB, ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
// ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Alert ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢ Goroutine ‡∏ä‡∏∑‡πà‡∏≠ StartUserRealtimeAlertMonitoring
func SendRealtimeAlert(c *gin.Context) {
    type HealthInput struct {
        UserID uint    `json:"userID"`
        Bpm    int     `json:"bpm"`
        Spo2   float64 `json:"spo2"`
        // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    }

    var input HealthInput
    if err := c.ShouldBindJSON(&input); err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid input format: " + err.Error()})
        return
    }

    // üö© [‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç] Logic ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á HealthData
    healthData := entity.HealthData{
        UserID:  input.UserID,
        Timestamp: time.Now(),
        Bpm:    uint(input.Bpm),
        Spo2:    input.Spo2,
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÄ‡∏ä‡πà‡∏ô DeviceID, Temperature ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    }

    db := config.DB()
    if err := db.Create(&healthData).Error; err != nil {
        log.Printf("‚ùå Failed to save real-time health data: %v", err)
        c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to save health data"})
        return
    }
    
    // üí° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Alert ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
    // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ StartUserRealtimeAlertMonitoring ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Background
    // ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡∏µ‡πâ) ‡∏°‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏á
    
    c.JSON(http.StatusOK, gin.H{
        "message": "Health data received and saved. Realtime monitoring is active and will check for alerts shortly.",
    })
}

func SendEmail(to string, subject string, body string, attachments ...string) error {
    from := os.Getenv("EMAIL_USER")
    pass := os.Getenv("EMAIL_PASS")
    smtpHost := os.Getenv("SMTP_HOST")
    smtpPort := os.Getenv("SMTP_PORT")

    if from == "" || pass == "" || smtpHost == "" || smtpPort == "" {
        // NOTE: Make sure the os package is imported!
        return fmt.Errorf("missing email environment variables")
    }

    port, err := strconv.Atoi(smtpPort)
    if err != nil {
        return fmt.Errorf("invalid SMTP_PORT: %v", err)
    }

    // NOTE: Make sure the gopkg.in/gomail.v2 package is imported!
    m := gomail.NewMessage()
    m.SetHeader("From", from)
    m.SetHeader("To", to)
    m.SetHeader("Subject", subject)
    m.SetBody("text/html", body) 

    for _, file := range attachments {
        // NOTE: Make sure the os package is imported!
        if _, err := os.Stat(file); err == nil {
            m.Attach(file)
        } else {
            fmt.Printf("‚ö†Ô∏è Attachment not found: %s\n", file)
        }
    }

    d := gomail.NewDialer(smtpHost, port, from, pass)

    if err := d.DialAndSend(m); err != nil {
        fmt.Println("‚ùå Failed to send email:", err)
        return err
    }

    fmt.Println("‚úÖ Email sent to:", to)
    return nil
}