package healthData

import (
	"gorm.io/gorm"
	"log"
	"net/http"
	"time"

	"github.com/JanisataMJ/WebApp/config"
	"github.com/JanisataMJ/WebApp/entity"
	"github.com/gin-gonic/gin"
)

// ListHealthData ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Endpoint)
// GET /list-healthData
func ListHealthData(c *gin.Context) {
	var data []entity.HealthData

	// preload User ‡πÅ‡∏•‡∏∞ HealthAnalysis ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á user
	if err := config.DB().
		Preload("User").
		Preload("HealthAnalysis").
		Preload("HealthAnalysis.RiskLevel").
		Find(&data).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, data)
}

// GetHealthDataByUserID ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á User (Endpoint)
// GET /healthData/:id
func GetHealthDataByUserID(c *gin.Context) {
	userID := c.Param("id")
	var data []entity.HealthData
	db := config.DB()

	result := db.Preload("User").
		Preload("HealthAnalysis").
		Preload("HealthAnalysis.RiskLevel").
		Where("user_id = ?", userID).
		Order("timestamp desc").
		Find(&data)

	if result.Error != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": result.Error.Error()})
		return
	}

	c.JSON(http.StatusOK, data)
}

type DailyData struct {
	Date       string  `json:"date"`
	AvgBpm     float64 `json:"avg_bpm"`
	Steps      int64   `json:"steps"`
	SleepHours string  `json:"sleep_hours"`
	Calories   float64 `json:"calories"`
	AvgSpo2    float64 `json:"avg_spo2"`
}

// GetWeeklyHealthData ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (Endpoint)
// GET /healthData/weekly/:id?mode=weekly
func GetWeeklyHealthData(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)
	userID := c.Param("id")
	mode := c.DefaultQuery("mode", "weekly") // weekly | lastweek | last2weeks

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Internal
	results, err := GetWeeklyHealthDataInternal(db, userID, mode)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, results)
}

// GetWeeklyHealthDataInternal ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Backend (Internal Function)
// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏ä‡πà‡∏ô HealthSummary ‡∏´‡∏£‡∏∑‡∏≠ HealthAnalysis
func GetWeeklyHealthDataInternal(db *gorm.DB, userID, mode string) ([]DailyData, error) {
	var healthData []entity.HealthData

	// üü¢ FIX 1: ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö UTC ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ñ‡πâ‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ä‡πâ UTC)
	today := time.Now().In(time.UTC)
	var startDate, endDate time.Time

	// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô UTC
	// Go's Weekday: Sunday=0, Monday=1, ..., Saturday=6
	weekday := int(today.Weekday())
	dayOffset := int(time.Monday) - weekday // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå (1) ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 0. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå (0) ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 1
	if dayOffset > 0 {
		dayOffset -= 7 // ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå Go ‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤ 0 ‡∏ñ‡∏∂‡∏á 6.
		// ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå (0), time.Monday(1) - 0 = 1, ‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡πâ‡∏≠‡∏ô 6 ‡∏ß‡∏±‡∏ô (1-7=-6)
		// ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ: dayOffset := (int(time.Monday) - weekday + 7) % 7 // ‡∏à‡∏∞‡πÑ‡∏î‡πâ 0..6
	}

	startOfThisWeek := today.AddDate(0, 0, dayOffset) // ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ

	// ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 00:00:00 ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå
	startOfThisWeek = time.Date(startOfThisWeek.Year(), startOfThisWeek.Month(), startOfThisWeek.Day(), 0, 0, 0, 0, time.UTC)

	switch mode {
	case "lastweek":
		// ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß: ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
		startDate = startOfThisWeek.AddDate(0, 0, -7)
		endDate = startOfThisWeek.AddDate(0, 0, -1)
	case "last2weeks":
		// 2 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏Å‡πà‡∏≠‡∏ô: ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå 2 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏Å‡πà‡∏≠‡∏ô - ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå 2 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏Å‡πà‡∏≠‡∏ô
		startDate = startOfThisWeek.AddDate(0, 0, -14)
		endDate = startOfThisWeek.AddDate(0, 0, -8)
	default: // "weekly" (‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ)
		// ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ: ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏ô‡∏µ‡πâ - ‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ
		startDate = startOfThisWeek
		endDate = startOfThisWeek.AddDate(0, 0, 6)
	}

	// üü¢ FIX 2: ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡πÉ‡∏ô UTC ‡πÄ‡∏™‡∏°‡∏≠
	startDate = time.Date(startDate.Year(), startDate.Month(), startDate.Day(), 0, 0, 0, 0, time.UTC)
	// ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà 23:59:59.999999999 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô
	endDate = time.Date(endDate.Year(), endDate.Month(), endDate.Day(), 23, 59, 59, 999999999, time.UTC)

	// üü¢ ‡πÄ‡∏û‡∏¥‡πà‡∏° Log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Query
	log.Printf("DB Query Health Data - UserID: %s Mode: %s. Period: %s (UTC) to %s (UTC)", userID, mode, startDate.Format(time.RFC3339), endDate.Format(time.RFC3339))

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	if err := db.Where("user_id = ? AND timestamp BETWEEN ? AND ?", userID, startDate, endDate).
		Order("timestamp ASC").Find(&healthData).Error; err != nil {
		return nil, err
	}

	// üü¢ Log ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Record ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)
	log.Printf("DB Query Health Data - Records retrieved: %d", len(healthData))

	// Group by day (‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
	dailyMap := make(map[string][]entity.HealthData)
	for _, hd := range healthData {
		// ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô UTC ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Group
		day := hd.Timestamp.In(time.UTC).Format("2006-01-02")
		dailyMap[day] = append(dailyMap[day], hd)
	}

	// ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á dailyMap ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
	var results []DailyData

	for d := startDate; !d.After(endDate); d = d.AddDate(0, 0, 1) {
		dayStr := d.Format("2006-01-02")
		list, exists := dailyMap[dayStr]

		if !exists || len(list) == 0 {
			// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô ‚Üí ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ default
			results = append(results, DailyData{
				Date:       dayStr,
				AvgBpm:     0,
				Steps:      0,
				SleepHours: "",
				Calories:   0,
				AvgSpo2:    0,
			})
			continue
		}

		var sumBpm, sumSpo2 float64
		var lastSteps int64
		var lastCalories float64
		var lastSleep string

		for _, hd := range list {
			sumBpm += float64(hd.Bpm)
			sumSpo2 += hd.Spo2
			lastSteps = hd.Steps
			lastCalories = hd.CaloriesBurned
			if hd.SleepHours != "" {
				lastSleep = hd.SleepHours
			}
		}

		count := float64(len(list))
		results = append(results, DailyData{
			Date:       dayStr,
			AvgBpm:     sumBpm / count,
			Steps:      lastSteps,
			SleepHours: lastSleep,
			Calories:   lastCalories,
			AvgSpo2:    sumSpo2 / count,
		})
	}
	return results, nil
}