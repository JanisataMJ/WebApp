import React from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell, RadialBarChart, RadialBar } from 'recharts';
import './steps.css';

interface StepsData {
  time: string;
  steps: number;
  cumulativeSteps: number;
  hour: number;
  activity: string;
  calories: number;
  distance: number;
  intensity: 'low' | 'moderate' | 'high' | 'very_high';
}

interface StepsSummary {
  totalSteps: number;
  targetSteps: number;
  completionPercentage: number;
  totalDistance: number;
  totalCalories: number;
  activeMinutes: number;
  averageStepsPerHour: number;
  peakHour: string;
  peakSteps: number;
}

interface HourlyActivity {
  hour: string;
  steps: number;
  activity: string;
  intensity: 'low' | 'moderate' | 'high' | 'very_high';
}

interface CustomTooltipProps {
  active?: boolean;
  payload?: Array<{
    value: number;
    payload?: StepsData;
    [key: string]: any;
  }>;
  label?: string;
}

const Graph5: React.FC = () => {
  const TARGET_STEPS = 10000;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
  const generateStepsData = (): StepsData[] => {
    const data: StepsData[] = [];
    let cumulativeSteps = 0;
    
    const activities = [
      { time: '06:00', activity: '‡∏ï‡∏∑‡πà‡∏ô‡∏ô‡∏≠‡∏ô', baseSteps: 50, intensity: 'low' as const },
      { time: '07:00', activity: '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß', baseSteps: 300, intensity: 'moderate' as const },
      { time: '08:00', activity: '‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', baseSteps: 800, intensity: 'high' as const },
      { time: '09:00', activity: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', baseSteps: 150, intensity: 'low' as const },
      { time: '10:00', activity: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', baseSteps: 200, intensity: 'low' as const },
      { time: '11:00', activity: '‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°', baseSteps: 400, intensity: 'moderate' as const },
      { time: '12:00', activity: '‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ó‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß', baseSteps: 600, intensity: 'high' as const },
      { time: '13:00', activity: '‡∏ó‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô', baseSteps: 100, intensity: 'low' as const },
      { time: '14:00', activity: '‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', baseSteps: 500, intensity: 'moderate' as const },
      { time: '15:00', activity: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', baseSteps: 180, intensity: 'low' as const },
      { time: '16:00', activity: '‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏≤‡πÅ‡∏ü', baseSteps: 350, intensity: 'moderate' as const },
      { time: '17:00', activity: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', baseSteps: 120, intensity: 'low' as const },
      { time: '18:00', activity: '‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô', baseSteps: 900, intensity: 'very_high' as const },
      { time: '19:00', activity: '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢', baseSteps: 1200, intensity: 'very_high' as const },
      { time: '20:00', activity: '‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≤‡∏ß', baseSteps: 400, intensity: 'moderate' as const },
      { time: '21:00', activity: '‡∏ó‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏¢‡πá‡∏ô', baseSteps: 200, intensity: 'low' as const },
      { time: '22:00', activity: '‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô', baseSteps: 150, intensity: 'low' as const },
      { time: '23:00', activity: '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ô‡∏≠‡∏ô', baseSteps: 100, intensity: 'low' as const }
    ];

    activities.forEach((activity, index) => {
      const [hour, minute] = activity.time.split(':').map(Number);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏õ‡∏£‡∏õ‡∏£‡∏ß‡∏ô
      const variation = (Math.random() - 0.5) * 200;
      const steps = Math.max(0, Math.round(activity.baseSteps + variation));
      cumulativeSteps += steps;
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
      const calories = Math.round(steps * 0.04); // ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 0.04 ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ï‡πà‡∏≠‡∏Å‡πâ‡∏≤‡∏ß
      const distance = Math.round((steps * 0.0008) * 100) / 100; // ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 0.8 ‡πÄ‡∏°‡∏ï‡∏£‡∏ï‡πà‡∏≠‡∏Å‡πâ‡∏≤‡∏ß ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
      
      data.push({
        time: activity.time,
        steps: steps,
        cumulativeSteps: cumulativeSteps,
        hour: hour,
        activity: activity.activity,
        calories: calories,
        distance: distance,
        intensity: activity.intensity
      });
    });
    
    return data;
  };

  const data = generateStepsData();
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  const calculateStepsSummary = (): StepsSummary => {
    const totalSteps = data[data.length - 1]?.cumulativeSteps || 0;
    const totalDistance = data.reduce((sum, item) => sum + item.distance, 0);
    const totalCalories = data.reduce((sum, item) => sum + item.calories, 0);
    
    // ‡∏´‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    const peakData = data.reduce((max, item) => item.steps > max.steps ? item : max, data[0]);
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (> 100 ‡∏Å‡πâ‡∏≤‡∏ß)
    const activeHours = data.filter(item => item.steps > 100).length;
    
    return {
      totalSteps,
      targetSteps: TARGET_STEPS,
      completionPercentage: (totalSteps / TARGET_STEPS) * 100,
      totalDistance: Math.round(totalDistance * 100) / 100,
      totalCalories,
      activeMinutes: activeHours * 60,
      averageStepsPerHour: Math.round(totalSteps / data.length),
      peakHour: peakData.time,
      peakSteps: peakData.steps
    };
  };

  const stepsSummary = calculateStepsSummary();
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Intensity Distribution
  const intensityData = data.reduce((acc, item) => {
    acc[item.intensity] = (acc[item.intensity] || 0) + item.steps;
    return acc;
  }, {} as Record<string, number>);

  const intensityDistribution = [
    { name: '‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢', value: intensityData.low || 0, color: '#10b981', percentage: 0 },
    { name: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', value: intensityData.moderate || 0, color: '#f59e0b', percentage: 0 },
    { name: '‡∏´‡∏ô‡∏±‡∏Å', value: intensityData.high || 0, color: '#ef4444', percentage: 0 },
    { name: '‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å', value: intensityData.very_high || 0, color: '#dc2626', percentage: 0 }
  ].map(item => ({
    ...item,
    percentage: (item.value / stepsSummary.totalSteps) * 100
  })).filter(item => item.value > 0);

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Progress Radial Chart
  const progressData = [
    {
      name: 'Progress',
      value: Math.min(stepsSummary.completionPercentage, 100),
      fill: stepsSummary.completionPercentage >= 100 ? '#10b981' : 
            stepsSummary.completionPercentage >= 70 ? '#f59e0b' : '#ef4444'
    }
  ];

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Hourly Bar Chart
  const hourlyData = data.map(item => ({
    hour: item.time,
    steps: item.steps,
    activity: item.activity,
    intensity: item.intensity
  }));

  const getIntensityColor = (intensity: string): string => {
    switch (intensity) {
      case 'low': return '#10b981';
      case 'moderate': return '#f59e0b';
      case 'high': return '#ef4444';
      case 'very_high': return '#dc2626';
      default: return '#6b7280';
    }
  };

  const getIntensityText = (intensity: string): string => {
    switch (intensity) {
      case 'low': return 'üü¢ ‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢';
      case 'moderate': return 'üü° ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
      case 'high': return 'üü† ‡∏´‡∏ô‡∏±‡∏Å';
      case 'very_high': return 'üî¥ ‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å';
      default: return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
    }
  };

  const getProgressStatus = (percentage: number): { text: string; emoji: string; color: string } => {
    if (percentage >= 100) return { text: '‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', emoji: 'üéâ', color: '#10b981' };
    if (percentage >= 80) return { text: '‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß', emoji: 'üí™', color: '#f59e0b' };
    if (percentage >= 50) return { text: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏µ', emoji: 'üëç', color: '#3b82f6' };
    return { text: '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°', emoji: 'üö∂‚Äç‚ôÇÔ∏è', color: '#ef4444' };
  };

  const formatNumber = (num: number): string => {
    return num.toLocaleString('th-TH');
  };

  const CustomTooltip: React.FC<CustomTooltipProps> = ({ active, payload, label }) => {
    if (active && payload && payload.length && payload[0].payload) {
      const data = payload[0].payload;
      return (
        <div className="steps-tooltip">
          <p className="tooltip-time-step">{`${label} - ${data.activity}`}</p>
          <div className="tooltip-steps">
            <span>üë£ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡πâ‡∏≤‡∏ß: {formatNumber(payload[0].value)}</span>
          </div>
          <div className="tooltip-intensity-step">
            <span className="intensity-indicator-step" style={{ backgroundColor: getIntensityColor(data.intensity) }}></span>
            {getIntensityText(data.intensity)}
          </div>
          <p className="tooltip-calories-step">üî• ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà: {data.calories} cal</p>
          <p className="tooltip-distance-step">üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: {data.distance} km</p>
        </div>
      );
    }
    return null;
  };

  const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, name }: any) => {
    const RADIAN = Math.PI / 180;
    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;
    const x = cx + radius * Math.cos(-midAngle * RADIAN);
    const y = cy + radius * Math.sin(-midAngle * RADIAN);

    if (percent < 0.05) return null;

    return (
      <text 
        x={x} 
        y={y} 
        fill="white" 
        textAnchor={x > cx ? 'start' : 'end'} 
        dominantBaseline="central"
        fontSize="12"
        fontWeight="bold"
      >
        {`${(percent * 100).toFixed(1)}%`}
      </text>
    );
  };

  const progress = getProgressStatus(stepsSummary.completionPercentage);

  return (
    <div className="steps-container">
      <div className="header-section-step">
        <h2 className="title-step">
          üë£ ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡πâ‡∏≤‡∏ß‡πÄ‡∏î‡∏¥‡∏ô ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ({new Date().toLocaleDateString('th-TH')})
        </h2>
        
        {/* ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ */}
        <div className="steps-stats-grid">
          <div className="steps-stat-card total">
            <div className="stat-icon-step">üë£</div>
            <div className="stat-value-step">{formatNumber(stepsSummary.totalSteps)}</div>
            <div className="stat-label-step">‡∏Å‡πâ‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
          </div>
          <div className="steps-stat-card distance">
            <div className="stat-icon-step">üìè</div>
            <div className="stat-value-step">{stepsSummary.totalDistance} km</div>
            <div className="stat-label-step">‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°</div>
          </div>
          <div className="steps-stat-card calories">
            <div className="stat-icon-step">üî•</div>
            <div className="stat-value-step">{formatNumber(stepsSummary.totalCalories)}</div>
            <div className="stat-label-step">‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç</div>
          </div>
          <div className="steps-stat-card active">
            <div className="stat-icon-step">‚è±Ô∏è</div>
            <div className="stat-value-step">{stepsSummary.activeMinutes}</div>
            <div className="stat-label-step">‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</div>
          </div>
        </div>

        {/* Progress Section */}
        <div className="progress-section-step">
          <h3 className="progress-title-step">üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢</h3>
          <div className="progress-container-step">
            <div className="radial-progress-step">
              <ResponsiveContainer width="100%" height={200}>
                <RadialBarChart 
                  cx="50%" 
                  cy="50%" 
                  innerRadius="60%" 
                  outerRadius="90%" 
                  data={progressData}
                  startAngle={90}
                  endAngle={-270}
                >
                  <RadialBar
                    dataKey="value"
                    cornerRadius={10}
                    fill={progress.color}
                  />
                  <text 
                    x="50%" 
                    y="50%" 
                    textAnchor="middle" 
                    dominantBaseline="middle" 
                    className="radial-text"
                  >
                    <tspan x="50%" dy="-10" fontSize="28" fontWeight="bold" fill={progress.color}>
                      {stepsSummary.completionPercentage.toFixed(1)}%
                    </tspan>
                    <tspan x="50%" dy="25" fontSize="14" fill="#64748b">
                      ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
                    </tspan>
                  </text>
                </RadialBarChart>
              </ResponsiveContainer>
            </div>
            <div className="progress-info-step">
              <div className="progress-status-step" style={{ backgroundColor: progress.color }}>
                {progress.emoji} {progress.text}
              </div>
              <div className="progress-details-step">
                <p>üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {formatNumber(TARGET_STEPS)} ‡∏Å‡πâ‡∏≤‡∏ß</p>
                <p>üìà ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å: {formatNumber(Math.max(0, TARGET_STEPS - stepsSummary.totalSteps))} ‡∏Å‡πâ‡∏≤‡∏ß</p>
                <p>‚≠ê ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {stepsSummary.peakHour} ({formatNumber(stepsSummary.peakSteps)} ‡∏Å‡πâ‡∏≤‡∏ß)</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Charts Section */}
      <div className="steps-charts-section">
        {/* Cumulative Steps Chart */}
        <div className="chart-container-step cumulative-chart-step">
          <h3 className="chart-title-step">üìà ‡∏Å‡πâ‡∏≤‡∏ß‡∏™‡∏∞‡∏™‡∏°‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô</h3>
          <ResponsiveContainer width="100%" height={350}>
            <AreaChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>
              <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
              <XAxis 
                dataKey="time" 
                stroke="#666"
                tick={{ fontSize: 12 }}
              />
              <YAxis 
                stroke="#666"
                tick={{ fontSize: 12 }}
                label={{ value: '‡∏Å‡πâ‡∏≤‡∏ß‡∏™‡∏∞‡∏™‡∏°', angle: -90, position: 'insideLeft' }}
              />
              <Tooltip content={<CustomTooltip />} />
              <Area
                type="monotone"
                dataKey="cumulativeSteps"
                stroke="#3b82f6"
                strokeWidth={3}
                fill="url(#stepsGradient)"
              />
              <defs>
                <linearGradient id="stepsGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="0%" stopColor="#3b82f6" stopOpacity={0.8}/>
                  <stop offset="50%" stopColor="#06b6d4" stopOpacity={0.6}/>
                  <stop offset="100%" stopColor="#10b981" stopOpacity={0.4}/>
                </linearGradient>
              </defs>
            </AreaChart>
          </ResponsiveContainer>
        </div>

        {/* Hourly Steps Bar Chart */}
        <div className="chart-container-step hourly-chart-step">
          <h3 className="chart-title-step">üìä ‡∏Å‡πâ‡∏≤‡∏ß‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</h3>
          <ResponsiveContainer width="100%" height={350}>
            <BarChart data={hourlyData} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>
              <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
              <XAxis 
                dataKey="hour" 
                stroke="#666"
                tick={{ fontSize: 12 }}
              />
              <YAxis 
                stroke="#666"
                tick={{ fontSize: 12 }}
                label={{ value: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡πâ‡∏≤‡∏ß', angle: -90, position: 'insideLeft' }}
              />
              <Tooltip />
              <Bar 
                dataKey="steps" 
                fill="#3b82f6"
                radius={[4, 4, 0, 0]}
              />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Bottom Charts */}
      <div className="bottom-charts-section-step">
        {/* Intensity Distribution */}
        <div className="chart-container-step pie-chart-step">
          <h3 className="chart-title-step">ü•ß ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</h3>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={intensityDistribution}
                cx="50%"
                cy="50%"
                labelLine={false}
                label={renderCustomizedLabel}
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
              >
                {intensityDistribution.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
              <Tooltip 
                formatter={(value: number, name: string, props: any) => [
                  `${formatNumber(value)} ‡∏Å‡πâ‡∏≤‡∏ß (${props.payload.percentage.toFixed(1)}%)`, 
                  name
                ]}
              />
            </PieChart>
          </ResponsiveContainer>
          
          <div className="pie-legend-step">
            {intensityDistribution.map((item, index) => (
              <div key={index} className="legend-item-step">
                <div 
                  className="legend-color-step" 
                  style={{ backgroundColor: item.color }}
                ></div>
                <span className="legend-text-step">
                  {item.name}: {formatNumber(item.value)} ‡∏Å‡πâ‡∏≤‡∏ß ({item.percentage.toFixed(1)}%)
                </span>
              </div>
            ))}
          </div>
        </div>

        {/* Daily Achievements */}
        <div className="achievements-container-step">
          <h3 className="chart-title-step">üèÜ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</h3>
          <div className="achievements-grid-step">
            <div className={`achievement-item-step ${stepsSummary.totalSteps >= 10000 ? 'completed' : 'pending'}`}>
              <div className="achievement-icon-step">üéØ</div>
              <div className="achievement-content-step">
                <h4>‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å</h4>
                <p>‡πÄ‡∏î‡∏¥‡∏ô 10,000 ‡∏Å‡πâ‡∏≤‡∏ß</p>
                <div className="achievement-status-step">
                  {stepsSummary.totalSteps >= 10000 ? '‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}
                </div>
              </div>
            </div>

            <div className={`achievement-item-step ${stepsSummary.totalDistance >= 5 ? 'completed' : 'pending'}`}>
              <div className="achievement-icon-step">üö∂</div>
              <div className="achievement-content-step">
                <h4>‡∏ô‡∏±‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</h4>
                <p>‡πÄ‡∏î‡∏¥‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á 5 km</p>
                <div className="achievement-status-step">
                  {stepsSummary.totalDistance >= 5 ? '‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}
                </div>
              </div>
            </div>

            <div className={`achievement-item-step ${stepsSummary.totalCalories >= 300 ? 'completed' : 'pending'}`}>
              <div className="achievement-icon-step">üî•</div>
              <div className="achievement-content-step">
                <h4>‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà</h4>
                <p>‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç 300 ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà</p>
                <div className="achievement-status-step">
                  {stepsSummary.totalCalories >= 300 ? '‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}
                </div>
              </div>
            </div>

            <div className={`achievement-item-step ${stepsSummary.activeMinutes >= 480 ? 'completed' : 'pending'}`}>
              <div className="achievement-icon-step">‚è∞</div>
              <div className="achievement-content-step">
                <h4>‡∏ô‡∏±‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</h4>
                <p>‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô 8 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</p>
                <div className="achievement-status-step">
                  {stepsSummary.activeMinutes >= 480 ? '‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Health Tips */}
      <div className="health-tips-section-step">
        <h3 className="tips-title-step">üí° ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h3>
        <div className="tips-grid-step">
          <div className="tip-card-step">
            <div className="tip-icon-step">üëü</div>
            <div className="tip-content-step">
              <h4>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</h4>
              <p>‡πÉ‡∏™‡πà‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡πâ‡∏≤‡∏î‡∏µ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡πâ‡∏ô‡πÄ‡∏ó‡πâ‡∏≤</p>
            </div>
          </div>
          <div className="tip-card-step">
            <div className="tip-icon-step">üö∂‚Äç‚ôÇÔ∏è</div>
            <div className="tip-content-step">
              <h4>‡πÄ‡∏î‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ó‡πà‡∏≤</h4>
              <p>‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏£‡∏á ‡πÅ‡∏Å‡∏ß‡πà‡∏á‡πÅ‡∏Ç‡∏ô ‡∏Å‡πâ‡∏≤‡∏ß‡πÄ‡∏ó‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥</p>
            </div>
          </div>
          <div className="tip-card-step">
            <div className="tip-icon-step">üíß</div>
            <div className="tip-content-step">
              <h4>‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠</h4>
              <p>‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô</p>
            </div>
          </div>
          <div className="tip-card-step">
            <div className="tip-icon-step">üéµ</div>
            <div className="tip-content-step">
              <h4>‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏£‡∏á‡∏à‡∏π‡∏á‡πÉ‡∏à</h4>
              <p>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Graph5;