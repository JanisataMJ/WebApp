import React, { useState, useEffect } from 'react';   
import './header.css';
import { Dropdown, Image, Modal } from 'react-bootstrap';
import { message, theme, Avatar } from 'antd';  
import logo from '../../assets/Logo.jpg';
import { GetUsersById, UpdateStatusWriterById } from '../../services/https/User/user';
import { UsersInterface } from '../../interface/profile_interface/IProfile';
import { IoPersonCircleOutline } from "react-icons/io5";
import Navbar from '../../compronents/Home_components/Navbar';
import { UserOutlined } from '@ant-design/icons';

const TOP: React.FC = () => {
    const [messageApi, contextHolder] = message.useMessage();
    const [showModal, setShowModal] = useState(false);
    const [isWriter, setIsWriter] = useState<boolean | null>(null);
    const [users, setUser] = useState<UsersInterface | null>(null);

    const { token: { colorBgContainer } } = theme.useToken();
 
    useEffect(() => {
        const fetchUserData = async () => {
            try {
                const userId = localStorage.getItem('id');
                if (userId) {
                    const userData = await GetUsersById(userId);
                    setUser(userData.data);
                    if (userData.status === 200) {
                        setIsWriter(userData.data.writer);
                    }
                }
            } catch (error) {
                messageApi.error("Error fetching user data");
            }
        };

        fetchUserData();
    }, [messageApi]);

    useEffect(() => {
        const checkWriterStatus = async () => {
            try {
                const userId = localStorage.getItem('id');
                if (userId) {
                    const userData = await GetUsersById(String(userId));
                    if (userData.status === 200) {
                        setIsWriter(userData.data.writer);
                    }
                }
            } catch (error) {
                messageApi.error("Error fetching user data");
            }
        };

        checkWriterStatus();
    }, [messageApi]);

    const handleWriterClick = async () => {
        try {
            const userId = localStorage.getItem('id');
            if (userId) {
                await UpdateStatusWriterById(String(userId), { writer: true });
                localStorage.setItem('isWriter', 'true');
                setIsWriter(true);
                window.location.href = '/writer';
            }
        } catch (error) {
            messageApi.error("Error updating writer status");
        }
    };

    const Logout = () => {
        localStorage.clear();
        messageApi.success("Logout successful");
        setTimeout(() => {
            window.location.href = "/";
        }, 2000);
    };

    const handleDropdownSelect = async (eventKey: string | null) => {
        switch (eventKey) {
            case 'writer':
                if (isWriter) {
                    window.location.href = '/writer';
                } else {
                    setShowModal(true);
                }
                break;
            default:
                break;
        }
    };

    const handleCloseModal = () => {
        setShowModal(false);
    };

    return (
        <>
            <div className="topbar">
                {contextHolder}
                <a href="/home">
                    <img id="Logo" src={logo} alt="Logo" />
                </a>
                <Navbar />
                {/* Profile dropdown */}
                <div id='profile'>
                    <Dropdown align="end" onSelect={handleDropdownSelect}>
                        <Dropdown.Toggle variant="light" id="dropdown-profile" as="div" className="hindesometing">
                            <Avatar
                                size={50}
                                style={{
                                    border: "3px solid #ffffffff",   // ขอบหนา 3px สีฟ้า
                                    boxShadow: "0 0 8px rgba(0,0,0,0.2)" // เพิ่มเงาเล็กน้อยให้ดูเด่น
                                }}
                                src={users?.profile ? `http://localhost:8000/${users.profile}` : undefined}
                                icon={!users?.profile && <UserOutlined />}
                            />
                        </Dropdown.Toggle>
                        <Dropdown.Menu>
                            <Dropdown.Item href="/profile">โปรไฟล์ของฉัน</Dropdown.Item>
                            <Dropdown.Item eventKey="writer">งานเขียน</Dropdown.Item>
                            <Dropdown.Item href="/bookshelf">ชั้นหนังสือ</Dropdown.Item>
                            <Dropdown.Item href="/Payment">เหรียญ & ประวัติธุรกรรม</Dropdown.Item>
                            <Dropdown.Item href="/settings">ตั้งค่า</Dropdown.Item>
                            <Dropdown.Item onClick={Logout}>ออกจากระบบ</Dropdown.Item>
                        </Dropdown.Menu> 
                    </Dropdown>
                </div>
            </div>

            {/* Modal */}
            <Modal show={showModal} onHide={handleCloseModal} className="custom-modal">
                <div className='modal-contentnew2 custom-modalnew'>
                    <div className='confirmation-message'>
                        <div onClick={handleCloseModal}>
                            <img className="cancle3" src="./src/assets/no.png" alt="cancel" />
                        </div>
                        <div style={{ transform: 'translate(-50px, -40px)', width: '300%' }}>
                            <img className="ready" src="./src/assets/error.png" alt="submit" />
                            <span className='text2'><b>คุณต้องเป็นนักเขียนก่อน</b></span>
                        </div>
                        <span className="text-1">
                            <span id='ready2' style={{ transform: 'translate(-20px, 0)' }}>
                                สมัครเข้าร่วมเป็นนักเขียน
                            </span>
                        </span>
                        <div>
                            <span id='buttonin' onClick={handleWriterClick} style={{ cursor: 'pointer' }}>
                                <span id='button3'>&nbsp;&nbsp;&nbsp;&nbsp;สมัคร</span>
                            </span>
                        </div>
                    </div>
                </div>
            </Modal>
        </>
    );
};

export default TOP;


























/* header.css */

/* Topbar */
.topbar {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 90;
    background: linear-gradient(to right, #934A5E, #C2B4D7, #57648E);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-wrap: wrap;
    align-items: flex-start;
    justify-content: flex-start;
    padding: 10px 20px;
    height: auto;
}

/* Logo */
.topbar > a {
    display: flex;
    align-items: center;
    height: 60px;
    flex-shrink: 0;
}

#Logo {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    margin-left: 10px;
    margin-right: 25px;
    vertical-align: middle;
}

/* Navbar container */
.topbar .category {
    flex: 1;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    height: auto !important;
}

.topbar .main-nav {
    display: flex !important;
    flex-wrap: wrap;
    gap: 12px;
    justify-content: center;
    width: 100%;
}

/* Navbar links */
.topbar .header-link {
    color: #ffffff;
    font-weight: normal;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 8px 14px;
    border-radius: 8px;
    text-decoration: none;
    font-size: 18px;
    height: 40px;
    line-height: 1;
    white-space: nowrap;
    margin: 0 10px;
}

.topbar .header-link:hover {
    color: #934A5E;
    background-color: rgba(255, 255, 255, 0.9);
    transform: scale(1.05);
}

.topbar .header-link.active {
    background-color: rgba(255, 255, 255, 0.2);
    color: #ffffff;
    font-weight: bold;
}

/* Submenu links */
.topbar .sub-header {
    position: absolute;
    top: 100%;
    left: 0;
    background: #C2B4D7;
    border: 1px solid #e5e7eb;
    padding: 8px;
    z-index: 2000;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    display: flex;
    flex-direction: column;
    margin-top: 4px;
    min-width: 180px;
}

.topbar .header-sub-link {
    display: block;
    color: #57648E;
    padding: 8px 12px;
    border-radius: 6px;
    text-decoration: none;
    font-size: 13px;
    transition: all 0.3s ease;
}

.topbar .header-sub-link:hover {
    background-color: #f3f4f6;
    color: #934A5E;
    transform: scale(1.02);
}

.topbar .header-sub-link.active-sub {
    background-color: #E5E7EB;
    color: #57648E;
    font-weight: bold;
}

/* Profile */
#profile {
    width: 47px;
    height: 47px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    margin-left: auto;
}

.hindesometing {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 47px;
    width: 47px;
}

.dropdown-toggle::after {
    display: none !important;
}

#dropdown-profile {
    border: none !important;
    background: transparent !important;
    box-shadow: none !important;
    padding: 0 !important;
    display: flex;
    align-items: center;
    justify-content: center;
}

.dropdown-menu {
    width: 190px;
    z-index: 2000;
    position: absolute;
    right: 0;
    top: 100%;
    margin-top: 5px;
}

/* Modal */
.custom-modal .modal-contentnew2 {
    background: white;
    border-radius: 10px;
    padding: 20px;
    text-align: center;
}

.confirmation-message {
    position: relative;
}

.cancle3 {
    position: absolute;
    top: 10px;
    right: 10px;
    width: 20px;
    height: 20px;
    cursor: pointer;
}

.ready {
    width: 60px;
    height: 60px;
    margin-bottom: 15px;
}

.text2 {
    display: block;
    font-size: 18px;
    margin-bottom: 10px;
}

.text-1 {
    display: block;
    margin-bottom: 20px;
}

#buttonin {
    background-color: #934A5E;
    color: white;
    padding: 10px 20px;
    border-radius: 5px;
    display: inline-block;
    cursor: pointer;
}

#buttonin:hover {
    background-color: #7a3a4b;
}

/* Responsive */
@media (max-width: 768px) {
    .topbar {
        display: flex;
        flex-direction: column;       /* stack ทุกอย่างแนวตั้ง */
        align-items: center;          /* จัดตรงกลางแนวนอน */
        padding: 15px 10px;
    }

    .topbar a#Logo {
        margin-bottom: 15px;          /* เว้นระยะห่างจาก navbar */
    }

    .topbar .category {               /* wrapper ของ Navbar */
        width: 100%;
        display: flex;
        flex-direction: column;       /* ปุ่มเรียงแนวตั้ง */
        align-items: center;          /* จัดกลางแนวนอน */
        justify-content: center;
        gap: 10px;
        margin-bottom: 15px;          /* เว้นระยะห่างจาก profile */
    }

    .topbar .main-nav {               /* actual navbar links */
        display: flex;
        flex-direction: column;       /* ปุ่มเรียงแนวตั้ง */
        align-items: center;          /* จัดตรงกลางแนวนอน */
        gap: 10px;
    }

    .topbar .nav-link, 
    .topbar .header-link {
        width: auto;                  /* ปุ่มพอดีข้อความ */
        text-align: center;
    }

    #profile, .hindesometing {
        width: 40px;
        height: 40px;
        margin-bottom: 10px;
    }
}


